{
  "address": "0x15f6B47C458AB521F2Ba89996900956Bda7e8c34",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "longVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "shortVault",
          "type": "address"
        }
      ],
      "name": "RegisterCrossTrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toVault",
          "type": "address"
        }
      ],
      "name": "RegisterWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "longVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "shortVault",
          "type": "address"
        }
      ],
      "name": "RevokeCrossTrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toVault",
          "type": "address"
        }
      ],
      "name": "RevokeWithdrawal",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "canCrossTrade",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "canWithdrawForFree",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "longVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "shortVault",
          "type": "address"
        }
      ],
      "name": "registerCrossTrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toVault",
          "type": "address"
        }
      ],
      "name": "registerFreeWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "longVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "shortVault",
          "type": "address"
        }
      ],
      "name": "revokeCrossTrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toVault",
          "type": "address"
        }
      ],
      "name": "revokeFreeWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2cdfa04d2b4c479f03c5ae59d01eb59d7e403d7badf20576a540a5eab32056e6",
  "receipt": {
    "to": null,
    "from": "0x3F57a38577F92adC561D8f4504832dCc34000f11",
    "contractAddress": "0x15f6B47C458AB521F2Ba89996900956Bda7e8c34",
    "transactionIndex": 0,
    "gasUsed": "511147",
    "logsBloom": "0x
    "blockHash": "0xcfcd236f2399809f6d5edb32a489b1c36f896399ae972c1f0ab0ed01b382f2de",
    "transactionHash": "0x2cdfa04d2b4c479f03c5ae59d01eb59d7e403d7badf20576a540a5eab32056e6",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11670459,
        "transactionHash": "0x2cdfa04d2b4c479f03c5ae59d01eb59d7e403d7badf20576a540a5eab32056e6",
        "address": "0x15f6B47C458AB521F2Ba89996900956Bda7e8c34",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003f57a38577f92adc561d8f4504832dcc34000f11"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xcfcd236f2399809f6d5edb32a489b1c36f896399ae972c1f0ab0ed01b382f2de"
      }
    ],
    "blockNumber": 11670459,
    "cumulativeGasUsed": "511147",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "509259907dca738bc5a20f06a9681697",
  "metadata": "{\"compiler\":{\"version\":\"0.7.2+commit.51b20bc0\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"longVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"shortVault\",\"type\":\"address\"}],\"name\":\"RegisterCrossTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toVault\",\"type\":\"address\"}],\"name\":\"RegisterWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"longVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"shortVault\",\"type\":\"address\"}],\"name\":\"RevokeCrossTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toVault\",\"type\":\"address\"}],\"name\":\"RevokeWithdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canCrossTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canWithdrawForFree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"longVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shortVault\",\"type\":\"address\"}],\"name\":\"registerCrossTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toVault\",\"type\":\"address\"}],\"name\":\"registerFreeWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"longVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shortVault\",\"type\":\"address\"}],\"name\":\"revokeCrossTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toVault\",\"type\":\"address\"}],\"name\":\"revokeFreeWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerCrossTrade(address,address)\":{\"params\":{\"longVault\":\"is the vault that is buying options\",\"shortVault\":\"is the vault that is selling options\"}},\"registerFreeWithdrawal(address,address)\":{\"params\":{\"fromVault\":\"is the vault to withdraw from\",\"toVault\":\"is the vault to withdraw to\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeCrossTrade(address,address)\":{\"params\":{\"longVault\":\"is the vault that is buying options\",\"shortVault\":\"is the vault that is selling options\"}},\"revokeFreeWithdrawal(address,address)\":{\"params\":{\"fromVault\":\"is the vault to withdraw from\",\"toVault\":\"is the vault to withdraw to\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"canCrossTrade\":{\"details\":\"Register vaults that can trade with each other mapping(longVault => mapping(shortVault => true/false))\"},\"canWithdrawForFree\":{\"details\":\"Register vaults that can withdraw for free to each other mapping(fromVault => mapping(toVault => true/false))\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"registerCrossTrade(address,address)\":{\"notice\":\"Register vaults that can trade options with each other\"},\"registerFreeWithdrawal(address,address)\":{\"notice\":\"Register vaults that can withdraw to each other for free\"},\"revokeCrossTrade(address,address)\":{\"notice\":\"Revoke trading access between vaults\"},\"revokeFreeWithdrawal(address,address)\":{\"notice\":\"Revoke withdrawal access between vaults\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VaultRegistry.sol\":\"VaultRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/VaultRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.2;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract VaultRegistry is Ownable {\\n    /// @dev Register vaults that can withdraw for free to each other\\n    /// mapping(fromVault => mapping(toVault => true/false))\\n    mapping(address => mapping(address => bool)) public canWithdrawForFree;\\n\\n    /// @dev Register vaults that can trade with each other\\n    /// mapping(longVault => mapping(shortVault => true/false))\\n    mapping(address => mapping(address => bool)) public canCrossTrade;\\n\\n    event RegisterWithdrawal(address fromVault, address toVault);\\n\\n    event RevokeWithdrawal(address fromVault, address toVault);\\n\\n    event RegisterCrossTrade(address longVault, address shortVault);\\n\\n    event RevokeCrossTrade(address longVault, address shortVault);\\n\\n    /**\\n     * @notice Register vaults that can withdraw to each other for free\\n     * @param fromVault is the vault to withdraw from\\n     * @param toVault is the vault to withdraw to\\n     */\\n    function registerFreeWithdrawal(address fromVault, address toVault)\\n        external\\n        onlyOwner\\n    {\\n        canWithdrawForFree[fromVault][toVault] = true;\\n        emit RegisterWithdrawal(fromVault, toVault);\\n    }\\n\\n    /**\\n     * @notice Revoke withdrawal access between vaults\\n     * @param fromVault is the vault to withdraw from\\n     * @param toVault is the vault to withdraw to\\n     */\\n    function revokeFreeWithdrawal(address fromVault, address toVault)\\n        external\\n        onlyOwner\\n    {\\n        canWithdrawForFree[fromVault][toVault] = false;\\n        emit RevokeWithdrawal(fromVault, toVault);\\n    }\\n\\n    /**\\n     * @notice Register vaults that can trade options with each other\\n     * @param longVault is the vault that is buying options\\n     * @param shortVault is the vault that is selling options\\n     */\\n    function registerCrossTrade(address longVault, address shortVault)\\n        external\\n        onlyOwner\\n    {\\n        canCrossTrade[longVault][shortVault] = true;\\n        emit RegisterCrossTrade(longVault, shortVault);\\n    }\\n\\n    /**\\n     * @notice Revoke trading access between vaults\\n     * @param longVault is the vault that is buying options\\n     * @param shortVault is the vault that is selling options\\n     */\\n    function revokeCrossTrade(address longVault, address shortVault)\\n        external\\n        onlyOwner\\n    {\\n        canCrossTrade[longVault][shortVault] = false;\\n        emit RevokeCrossTrade(longVault, shortVault);\\n    }\\n}\\n\",\"keccak256\":\"0x12bf82bb8b157923c78dc32ad9a9f0686fb67f3dd1096671d5b1006db7234c7a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600061001b61006a565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006e565b3390565b6107d38061007d6000396000f3fe608060405234801561001057600080fd5b50600436106100925760003560e01c80638da5cb5b116100665780638da5cb5b1461012b578063b95d1d821461014f578063cf03b30f14610191578063daffc89a146101bf578063f2fde38b146101ed57610092565b8062f3dc3e146100975780632c17b1f2146100c7578063715018a6146100f55780637d719ac3146100fd575b600080fd5b6100c5600480360360408110156100ad57600080fd5b506001600160a01b0381358116916020013516610213565b005b6100c5600480360360408110156100dd57600080fd5b506001600160a01b03813581169160200135166102e2565b6100c56103b4565b6100c56004803603604081101561011357600080fd5b506001600160a01b0381358116916020013516610460565b61013361052f565b604080516001600160a01b039092168252519081900360200190f35b61017d6004803603604081101561016557600080fd5b506001600160a01b038135811691602001351661053e565b604080519115158252519081900360200190f35b61017d600480360360408110156101a757600080fd5b506001600160a01b038135811691602001351661055e565b6100c5600480360360408110156101d557600080fd5b506001600160a01b038135811691602001351661057e565b6100c56004803603602081101561020357600080fd5b50356001600160a01b0316610651565b61021b610753565b6001600160a01b031661022c61052f565b6001600160a01b031614610275576040805162461bcd60e51b8152602060048201819052602482015260008051602061077e833981519152604482015290519081900360640190fd5b6001600160a01b03808316600081815260026020908152604080832094861680845294825291829020805460ff19169055815192835282019290925281517fcaadacf164089fe1112f1dfb5e493706e388e825b775105a09d0d9df47ad12f6929181900390910190a15050565b6102ea610753565b6001600160a01b03166102fb61052f565b6001600160a01b031614610344576040805162461bcd60e51b8152602060048201819052602482015260008051602061077e833981519152604482015290519081900360640190fd5b6001600160a01b03808316600081815260026020908152604080832094861680845294825291829020805460ff19166001179055815192835282019290925281517f3f405cdfa7608f1fd87a2520bf7ffaf371dbb363ca34a9aa4c752a0c5567390d929181900390910190a15050565b6103bc610753565b6001600160a01b03166103cd61052f565b6001600160a01b031614610416576040805162461bcd60e51b8152602060048201819052602482015260008051602061077e833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b610468610753565b6001600160a01b031661047961052f565b6001600160a01b0316146104c2576040805162461bcd60e51b8152602060048201819052602482015260008051602061077e833981519152604482015290519081900360640190fd5b6001600160a01b03808316600081815260016020908152604080832094861680845294825291829020805460ff19169055815192835282019290925281517fe51eafc8acd4d67c3761f70de42e15e5091b876b6b70b21a2e573075206c4b90929181900390910190a15050565b6000546001600160a01b031690565b600160209081526000928352604080842090915290825290205460ff1681565b600260209081526000928352604080842090915290825290205460ff1681565b610586610753565b6001600160a01b031661059761052f565b6001600160a01b0316146105e0576040805162461bcd60e51b8152602060048201819052602482015260008051602061077e833981519152604482015290519081900360640190fd5b6001600160a01b03808316600081815260016020818152604080842095871680855295825292839020805460ff1916909217909155815192835282019290925281517f323c77f675ddc2b7f3767cd796d6cca6a9d0649fe8aa3c20ce23b8f54d1f9596929181900390910190a15050565b610659610753565b6001600160a01b031661066a61052f565b6001600160a01b0316146106b3576040805162461bcd60e51b8152602060048201819052602482015260008051602061077e833981519152604482015290519081900360640190fd5b6001600160a01b0381166106f85760405162461bcd60e51b81526004018080602001828103825260268152602001806107586026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212202c8f03c770ff08ced648607de661b69a9ca7d48a3aaebde6abf92339978d364f64736f6c63430007020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100925760003560e01c80638da5cb5b116100665780638da5cb5b1461012b578063b95d1d821461014f578063cf03b30f14610191578063daffc89a146101bf578063f2fde38b146101ed57610092565b8062f3dc3e146100975780632c17b1f2146100c7578063715018a6146100f55780637d719ac3146100fd575b600080fd5b6100c5600480360360408110156100ad57600080fd5b506001600160a01b0381358116916020013516610213565b005b6100c5600480360360408110156100dd57600080fd5b506001600160a01b03813581169160200135166102e2565b6100c56103b4565b6100c56004803603604081101561011357600080fd5b506001600160a01b0381358116916020013516610460565b61013361052f565b604080516001600160a01b039092168252519081900360200190f35b61017d6004803603604081101561016557600080fd5b506001600160a01b038135811691602001351661053e565b604080519115158252519081900360200190f35b61017d600480360360408110156101a757600080fd5b506001600160a01b038135811691602001351661055e565b6100c5600480360360408110156101d557600080fd5b506001600160a01b038135811691602001351661057e565b6100c56004803603602081101561020357600080fd5b50356001600160a01b0316610651565b61021b610753565b6001600160a01b031661022c61052f565b6001600160a01b031614610275576040805162461bcd60e51b8152602060048201819052602482015260008051602061077e833981519152604482015290519081900360640190fd5b6001600160a01b03808316600081815260026020908152604080832094861680845294825291829020805460ff19169055815192835282019290925281517fcaadacf164089fe1112f1dfb5e493706e388e825b775105a09d0d9df47ad12f6929181900390910190a15050565b6102ea610753565b6001600160a01b03166102fb61052f565b6001600160a01b031614610344576040805162461bcd60e51b8152602060048201819052602482015260008051602061077e833981519152604482015290519081900360640190fd5b6001600160a01b03808316600081815260026020908152604080832094861680845294825291829020805460ff19166001179055815192835282019290925281517f3f405cdfa7608f1fd87a2520bf7ffaf371dbb363ca34a9aa4c752a0c5567390d929181900390910190a15050565b6103bc610753565b6001600160a01b03166103cd61052f565b6001600160a01b031614610416576040805162461bcd60e51b8152602060048201819052602482015260008051602061077e833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b610468610753565b6001600160a01b031661047961052f565b6001600160a01b0316146104c2576040805162461bcd60e51b8152602060048201819052602482015260008051602061077e833981519152604482015290519081900360640190fd5b6001600160a01b03808316600081815260016020908152604080832094861680845294825291829020805460ff19169055815192835282019290925281517fe51eafc8acd4d67c3761f70de42e15e5091b876b6b70b21a2e573075206c4b90929181900390910190a15050565b6000546001600160a01b031690565b600160209081526000928352604080842090915290825290205460ff1681565b600260209081526000928352604080842090915290825290205460ff1681565b610586610753565b6001600160a01b031661059761052f565b6001600160a01b0316146105e0576040805162461bcd60e51b8152602060048201819052602482015260008051602061077e833981519152604482015290519081900360640190fd5b6001600160a01b03808316600081815260016020818152604080842095871680855295825292839020805460ff1916909217909155815192835282019290925281517f323c77f675ddc2b7f3767cd796d6cca6a9d0649fe8aa3c20ce23b8f54d1f9596929181900390910190a15050565b610659610753565b6001600160a01b031661066a61052f565b6001600160a01b0316146106b3576040805162461bcd60e51b8152602060048201819052602482015260008051602061077e833981519152604482015290519081900360640190fd5b6001600160a01b0381166106f85760405162461bcd60e51b81526004018080602001828103825260268152602001806107586026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212202c8f03c770ff08ced648607de661b69a9ca7d48a3aaebde6abf92339978d364f64736f6c63430007020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerCrossTrade(address,address)": {
        "params": {
          "longVault": "is the vault that is buying options",
          "shortVault": "is the vault that is selling options"
        }
      },
      "registerFreeWithdrawal(address,address)": {
        "params": {
          "fromVault": "is the vault to withdraw from",
          "toVault": "is the vault to withdraw to"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeCrossTrade(address,address)": {
        "params": {
          "longVault": "is the vault that is buying options",
          "shortVault": "is the vault that is selling options"
        }
      },
      "revokeFreeWithdrawal(address,address)": {
        "params": {
          "fromVault": "is the vault to withdraw from",
          "toVault": "is the vault to withdraw to"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "canCrossTrade": {
        "details": "Register vaults that can trade with each other mapping(longVault => mapping(shortVault => true/false))"
      },
      "canWithdrawForFree": {
        "details": "Register vaults that can withdraw for free to each other mapping(fromVault => mapping(toVault => true/false))"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "registerCrossTrade(address,address)": {
        "notice": "Register vaults that can trade options with each other"
      },
      "registerFreeWithdrawal(address,address)": {
        "notice": "Register vaults that can withdraw to each other for free"
      },
      "revokeCrossTrade(address,address)": {
        "notice": "Revoke trading access between vaults"
      },
      "revokeFreeWithdrawal(address,address)": {
        "notice": "Revoke withdrawal access between vaults"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1560,
        "contract": "contracts/VaultRegistry.sol:VaultRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3438,
        "contract": "contracts/VaultRegistry.sol:VaultRegistry",
        "label": "canWithdrawForFree",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3445,
        "contract": "contracts/VaultRegistry.sol:VaultRegistry",
        "label": "canCrossTrade",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      }
    }
  }
}