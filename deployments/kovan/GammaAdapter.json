{
  "address": "0x380b81d8Fb77d99AbCB39f9B62dC08003704b42D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oTokenFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gammaController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_marginPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcEthPriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zeroExExchange",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "options",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exerciseProfit",
          "type": "uint256"
        }
      ],
      "name": "Exercised",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "optionID",
          "type": "uint256"
        }
      ],
      "name": "Purchased",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MARGIN_POOL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_ROUTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDCETHPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZERO_EX_EXCHANGE_V3",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "options",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "canExercise",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeShort",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "strikeAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "strikePrice",
              "type": "uint256"
            },
            {
              "internalType": "enum ProtocolAdapterTypes.OptionType",
              "name": "optionType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            }
          ],
          "internalType": "struct ProtocolAdapterTypes.OptionTerms",
          "name": "optionTerms",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        }
      ],
      "name": "createShort",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "options",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "exercise",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "options",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "exerciseProfit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gammaController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "strikeAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "strikePrice",
              "type": "uint256"
            },
            {
              "internalType": "enum ProtocolAdapterTypes.OptionType",
              "name": "optionType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            }
          ],
          "internalType": "struct ProtocolAdapterTypes.OptionTerms",
          "name": "optionTerms",
          "type": "tuple"
        }
      ],
      "name": "getOptionsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "strikeAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "strikePrice",
              "type": "uint256"
            },
            {
              "internalType": "enum ProtocolAdapterTypes.OptionType",
              "name": "optionType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            }
          ],
          "internalType": "struct ProtocolAdapterTypes.OptionTerms",
          "name": "optionTerms",
          "type": "tuple"
        }
      ],
      "name": "lookupOToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "oToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonFungible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oTokenFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "strikeAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "strikePrice",
              "type": "uint256"
            },
            {
              "internalType": "enum ProtocolAdapterTypes.OptionType",
              "name": "optionType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            }
          ],
          "internalType": "struct ProtocolAdapterTypes.OptionTerms",
          "name": "optionTerms",
          "type": "tuple"
        }
      ],
      "name": "optionsExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "strikeAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "strikePrice",
              "type": "uint256"
            },
            {
              "internalType": "enum ProtocolAdapterTypes.OptionType",
              "name": "optionType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            }
          ],
          "internalType": "struct ProtocolAdapterTypes.OptionTerms",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "premium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "strikeAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "strikePrice",
              "type": "uint256"
            },
            {
              "internalType": "enum ProtocolAdapterTypes.OptionType",
              "name": "optionType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            }
          ],
          "internalType": "struct ProtocolAdapterTypes.OptionTerms",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchaseMethod",
      "outputs": [
        {
          "internalType": "enum ProtocolAdapterTypes.PurchaseMethod",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "strikeAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "strikePrice",
              "type": "uint256"
            },
            {
              "internalType": "enum ProtocolAdapterTypes.OptionType",
              "name": "optionType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            }
          ],
          "internalType": "struct ProtocolAdapterTypes.OptionTerms",
          "name": "optionTerms",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "exchangeAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "buyTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sellTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowanceTarget",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "makerAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takerAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "swapData",
              "type": "bytes"
            }
          ],
          "internalType": "struct ProtocolAdapterTypes.ZeroExOrder",
          "name": "zeroExOrder",
          "type": "tuple"
        }
      ],
      "name": "purchaseWithZeroEx",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x350ed2eb4afb66c3e6abb666ceb34df5925fe285965f6d780e1b9f135ff212ac",
  "receipt": {
    "to": null,
    "from": "0x3F57a38577F92adC561D8f4504832dCc34000f11",
    "contractAddress": "0x380b81d8Fb77d99AbCB39f9B62dC08003704b42D",
    "transactionIndex": 19,
    "gasUsed": "3128246",
    "logsBloom": "0x
    "blockHash": "0x7b1b51ddf082a3b49cef53266ea5d51844965d1067dbf65dc5c817cb8eaa0fde",
    "transactionHash": "0x350ed2eb4afb66c3e6abb666ceb34df5925fe285965f6d780e1b9f135ff212ac",
    "logs": [],
    "blockNumber": 30013365,
    "cumulativeGasUsed": "4045690",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9f13dd8149F3CdA298F9dF404A467c3F24Fa02C7",
    "0x26CC1B3AD318a7B676Da12a15C5bD8ed43f9478e",
    "0xe6a0199CE6bedEa133B62461840852e42C4Bf6dB",
    "0x986b5E1e1755e3C2440e960477f25201B0a8bbD4",
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
    "0xd0A1E359811322d97991E03f863a0C30C2cF029C",
    "0x7e6edA50d1c833bE936492BF42C1BF376239E9e2",
    "0x4eacd0aF335451709e1e7B570B8Ea68EdEC8bc97"
  ],
  "numDeployments": 1,
  "solcInputHash": "cb6305477209f66e7292929b949163ad",
  "metadata": "{\"compiler\":{\"version\":\"0.7.2+commit.51b20bc0\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oTokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gammaController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marginPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcEthPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zeroExExchange\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"options\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exerciseProfit\",\"type\":\"uint256\"}],\"name\":\"Exercised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MARGIN_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDCETHPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_EX_EXCHANGE_V3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"options\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"canExercise\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeShort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolAdapterTypes.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolAdapterTypes.OptionTerms\",\"name\":\"optionTerms\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"createShort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"options\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"exercise\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"options\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exerciseProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gammaController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolAdapterTypes.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolAdapterTypes.OptionTerms\",\"name\":\"optionTerms\",\"type\":\"tuple\"}],\"name\":\"getOptionsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolAdapterTypes.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolAdapterTypes.OptionTerms\",\"name\":\"optionTerms\",\"type\":\"tuple\"}],\"name\":\"lookupOToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonFungible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oTokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolAdapterTypes.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolAdapterTypes.OptionTerms\",\"name\":\"optionTerms\",\"type\":\"tuple\"}],\"name\":\"optionsExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolAdapterTypes.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolAdapterTypes.OptionTerms\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolAdapterTypes.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolAdapterTypes.OptionTerms\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseMethod\",\"outputs\":[{\"internalType\":\"enum ProtocolAdapterTypes.PurchaseMethod\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolAdapterTypes.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolAdapterTypes.OptionTerms\",\"name\":\"optionTerms\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"internalType\":\"struct ProtocolAdapterTypes.ZeroExOrder\",\"name\":\"zeroExOrder\",\"type\":\"tuple\"}],\"name\":\"purchaseWithZeroEx\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"canExercise(address,uint256,uint256)\":{\"params\":{\"amount\":\"is amount of otokens to exercise\",\"options\":\"is the address of the otoken\"}},\"constructor\":{\"params\":{\"_gammaController\":\"is a top-level contract which allows users to perform multiple actions in the Gamma protocol https://github.com/opynfinance/GammaProtocol/blob/master/contracts/Controller.sol\",\"_oTokenFactory\":\"is the Gamma protocol factory contract which spawns otokens https://github.com/opynfinance/GammaProtocol/blob/master/contracts/OtokenFactory.sol\"}},\"createShort((address,address,address,uint256,uint256,uint8,address),uint256)\":{\"params\":{\"depositAmount\":\"is the amount deposited to open the vault.        This amount will determine how much otokens to mint.\",\"optionTerms\":\"is the terms of the option contract\"}},\"exercise(address,uint256,uint256,address)\":{\"params\":{\"amount\":\"is the amount of tokens or options contract to exercise.        Only relevant for fungle protocols like Opyn\",\"options\":\"is the address of the options contract\",\"recipient\":\"is the account that receives the exercised profits.        This is needed since the adapter holds all the positions and the msg.sender is an instrument contract.\"}},\"exerciseProfit(address,uint256,uint256)\":{\"params\":{\"amount\":\"is the amount of tokens or options contract to exercise        Only relevant for fungle protocols like Opyn\",\"options\":\"is the address of the options contract\"}},\"getOptionsAddress((address,address,address,uint256,uint256,uint8,address))\":{\"params\":{\"optionTerms\":\"is the terms of the option contract\"}},\"lookupOToken((address,address,address,uint256,uint256,uint8,address))\":{\"params\":{\"optionTerms\":\"is the terms of the option contract\"}},\"optionsExist((address,address,address,uint256,uint256,uint8,address))\":{\"params\":{\"optionTerms\":\"is the terms of the option contract\"}},\"purchaseWithZeroEx((address,address,address,uint256,uint256,uint8,address),(address,address,address,address,uint256,uint256,uint256,bytes))\":{\"params\":{\"optionTerms\":\"is the terms of the option contract\",\"zeroExOrder\":\"is the 0x order struct constructed using the 0x API response passed by the frontend.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Exercised(address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when an option contract is exercised\"},\"Purchased(address,string,address,uint256,uint256)\":{\"notice\":\"Emitted when a new option contract is purchased\"}},\"kind\":\"user\",\"methods\":{\"canExercise(address,uint256,uint256)\":{\"notice\":\"Helper function that returns true if the option can be exercised now.\"},\"closeShort()\":{\"notice\":\"Close the existing short otoken position. Currently this implementation is simple. It closes the most recent vault opened by the contract. This assumes that the contract will only have a single vault open at any given time. Since calling `closeShort` deletes vaults, this assumption should hold.\"},\"constructor\":{\"notice\":\"Constructor for the GammaAdapter which initializes a variables\"},\"createShort((address,address,address,uint256,uint256,uint8,address),uint256)\":{\"notice\":\"Creates a short otoken position by opening a vault, depositing collateral and minting otokens. The sale of otokens is left to the caller contract to perform.\"},\"exercise(address,uint256,uint256,address)\":{\"notice\":\"Exercises the options contract.\"},\"exerciseProfit(address,uint256,uint256)\":{\"notice\":\"Amount of profit made from exercising an option contract abs(current price - strike price)         0 if exercising out-the-money.\"},\"getOptionsAddress((address,address,address,uint256,uint256,uint8,address))\":{\"notice\":\"Get the options contract's address based on the passed parameters\"},\"lookupOToken((address,address,address,uint256,uint256,uint8,address))\":{\"notice\":\"Function to lookup oToken addresses. oToken addresses are keyed by an ABI-encoded byte string\"},\"nonFungible()\":{\"notice\":\"Boolean flag to indicate whether to use option IDs or not. Fungible protocols normally use tokens to represent option contracts.\"},\"optionsExist((address,address,address,uint256,uint256,uint8,address))\":{\"notice\":\"Check if an options contract exist based on the passed parameters.\"},\"premium((address,address,address,uint256,uint256,uint8,address),uint256)\":{\"notice\":\"Gets the premium to buy `purchaseAmount` of the option contract in ETH terms.\"},\"protocolName()\":{\"notice\":\"Name of the adapter. E.g. \\\"HEGIC\\\", \\\"OPYN_V1\\\". Used as index key for adapter addresses\"},\"purchase((address,address,address,uint256,uint256,uint8,address),uint256,uint256)\":{\"notice\":\"Stubbed out for conforming to the IProtocolAdapter interface.\"},\"purchaseMethod()\":{\"notice\":\"Returns the purchase method used to purchase options\"},\"purchaseWithZeroEx((address,address,address,uint256,uint256,uint8,address),(address,address,address,address,uint256,uint256,uint256,bytes))\":{\"notice\":\"Purchases otokens using a 0x order struct It is the obligation of the delegate-calling contract to return the remaining msg.value back to the user.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/adapters/GammaAdapter.sol\":\"GammaAdapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\":{\"content\":\"pragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x12f0e35e0320088f2110173226860e44309766c0f7022a2433efdebd5bf1a002\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/adapters/GammaAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.2;\\npragma experimental ABIEncoderV2;\\nimport {\\n    AggregatorV3Interface\\n} from \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IProtocolAdapter, ProtocolAdapterTypes} from \\\"./IProtocolAdapter.sol\\\";\\nimport {\\n    IOtokenFactory,\\n    OtokenInterface,\\n    IController,\\n    OracleInterface,\\n    GammaTypes\\n} from \\\"../interfaces/GammaInterface.sol\\\";\\nimport {IWETH} from \\\"../interfaces/IWETH.sol\\\";\\nimport {IUniswapV2Router02} from \\\"../interfaces/IUniswapV2Router.sol\\\";\\nimport {DSMath} from \\\"../lib/DSMath.sol\\\";\\nimport {SafeERC20} from \\\"../lib/CustomSafeERC20.sol\\\";\\nimport {IERC20Detailed} from \\\"../interfaces/IERC20Detailed.sol\\\";\\n\\ncontract GammaAdapter is IProtocolAdapter, DSMath {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // gammaController is the top-level contract in Gamma protocol\\n    // which allows users to perform multiple actions on their vaults\\n    // and positions https://github.com/opynfinance/GammaProtocol/blob/master/contracts/Controller.sol\\n    address public immutable gammaController;\\n\\n    // oTokenFactory is the factory contract used to spawn otokens. Used to lookup otokens.\\n    address public immutable oTokenFactory;\\n\\n    // _swapWindow is the number of seconds in which a Uniswap swap is valid from block.timestamp.\\n    uint256 private constant SWAP_WINDOW = 900;\\n\\n    string private constant _name = \\\"OPYN_GAMMA\\\";\\n    bool private constant _nonFungible = false;\\n\\n    // https://github.com/opynfinance/GammaProtocol/blob/master/contracts/Otoken.sol#L70\\n    uint256 private constant OTOKEN_DECIMALS = 10**8;\\n\\n    uint256 private constant SLIPPAGE_TOLERANCE = 0.75 ether;\\n\\n    // MARGIN_POOL is Gamma protocol's collateral pool.\\n    // Needed to approve collateral.safeTransferFrom for minting otokens.\\n    // https://github.com/opynfinance/GammaProtocol/blob/master/contracts/MarginPool.sol\\n    address public immutable MARGIN_POOL;\\n\\n    // USDCETHPriceFeed is the USDC/ETH Chainlink price feed used\\n    // to perform swaps, as an alternative to getAmountsIn\\n    AggregatorV3Interface public immutable USDCETHPriceFeed;\\n\\n    // UNISWAP_ROUTER is Uniswap's periphery contract for conducting trades.\\n    // Using this contract is gas inefficient and should only used for convenience i.e. admin functions\\n    address public immutable UNISWAP_ROUTER;\\n\\n    // WETH9 contract\\n    address public immutable WETH;\\n\\n    // USDC is the strike asset in Gamma Protocol\\n    address public immutable USDC;\\n\\n    // 0x proxy for performing buys\\n    address public immutable ZERO_EX_EXCHANGE_V3;\\n\\n    /**\\n     * @notice Constructor for the GammaAdapter which initializes a variables\\n     * @param _oTokenFactory is the Gamma protocol factory contract which spawns otokens\\n     * https://github.com/opynfinance/GammaProtocol/blob/master/contracts/OtokenFactory.sol\\n     * @param _gammaController is a top-level contract which allows users to\\n     * perform multiple actions in the Gamma protocol\\n     * https://github.com/opynfinance/GammaProtocol/blob/master/contracts/Controller.sol\\n     */\\n    constructor(\\n        address _oTokenFactory,\\n        address _gammaController,\\n        address _marginPool,\\n        address _usdcEthPriceFeed,\\n        address _uniswapRouter,\\n        address _weth,\\n        address _usdc,\\n        address _zeroExExchange\\n    ) {\\n        require(_oTokenFactory != address(0), \\\"!_oTokenFactory\\\");\\n        require(_gammaController != address(0), \\\"!_gammaController\\\");\\n        require(_marginPool != address(0), \\\"!_marginPool\\\");\\n        require(_usdcEthPriceFeed != address(0), \\\"!_usdcEthPriceFeed\\\");\\n        require(_uniswapRouter != address(0), \\\"!_uniswapRouter\\\");\\n        require(_weth != address(0), \\\"!_weth\\\");\\n        require(_usdc != address(0), \\\"!_usdc\\\");\\n        require(_zeroExExchange != address(0), \\\"!_zeroExExchange\\\");\\n\\n        oTokenFactory = _oTokenFactory;\\n        gammaController = _gammaController;\\n        MARGIN_POOL = _marginPool;\\n        USDCETHPriceFeed = AggregatorV3Interface(_usdcEthPriceFeed);\\n        UNISWAP_ROUTER = _uniswapRouter;\\n        WETH = _weth;\\n        USDC = _usdc;\\n        ZERO_EX_EXCHANGE_V3 = _zeroExExchange;\\n    }\\n\\n    receive() external payable {}\\n\\n    function protocolName() external pure override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function nonFungible() external pure override returns (bool) {\\n        return _nonFungible;\\n    }\\n\\n    function purchaseMethod()\\n        external\\n        pure\\n        override\\n        returns (ProtocolAdapterTypes.PurchaseMethod)\\n    {\\n        return ProtocolAdapterTypes.PurchaseMethod.ZeroEx;\\n    }\\n\\n    /**\\n     * @notice Check if an options contract exist based on the passed parameters.\\n     * @param optionTerms is the terms of the option contract\\n     */\\n    function optionsExist(ProtocolAdapterTypes.OptionTerms calldata optionTerms)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return lookupOToken(optionTerms) != address(0);\\n    }\\n\\n    /**\\n     * @notice Get the options contract's address based on the passed parameters\\n     * @param optionTerms is the terms of the option contract\\n     */\\n    function getOptionsAddress(\\n        ProtocolAdapterTypes.OptionTerms calldata optionTerms\\n    ) external view override returns (address) {\\n        return lookupOToken(optionTerms);\\n    }\\n\\n    /**\\n     * @notice Gets the premium to buy `purchaseAmount` of the option contract in ETH terms.\\n     */\\n    function premium(ProtocolAdapterTypes.OptionTerms calldata, uint256)\\n        external\\n        pure\\n        override\\n        returns (uint256 cost)\\n    {\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Amount of profit made from exercising an option contract abs(current price - strike price)\\n     *         0 if exercising out-the-money.\\n     * @param options is the address of the options contract\\n     * @param amount is the amount of tokens or options contract to exercise\\n     *        Only relevant for fungle protocols like Opyn\\n     */\\n    function exerciseProfit(\\n        address options,\\n        uint256,\\n        uint256 amount\\n    ) public view override returns (uint256 profit) {\\n        IController controller = IController(gammaController);\\n        OracleInterface oracle = OracleInterface(controller.oracle());\\n        OtokenInterface otoken = OtokenInterface(options);\\n\\n        uint256 spotPrice = oracle.getPrice(otoken.underlyingAsset());\\n        uint256 strikePrice = otoken.strikePrice();\\n        bool isPut = otoken.isPut();\\n\\n        if (!isPut && spotPrice <= strikePrice) {\\n            return 0;\\n        } else if (isPut && spotPrice >= strikePrice) {\\n            return 0;\\n        }\\n\\n        return controller.getPayout(options, amount.div(10**10));\\n    }\\n\\n    /**\\n     * @notice Helper function that returns true if the option can be exercised now.\\n     * @param options is the address of the otoken\\n     * @param amount is amount of otokens to exercise\\n     */\\n    function canExercise(\\n        address options,\\n        uint256,\\n        uint256 amount\\n    ) public view override returns (bool) {\\n        OtokenInterface otoken = OtokenInterface(options);\\n\\n        bool settlementAllowed =\\n            isSettlementAllowed(\\n                otoken.underlyingAsset(),\\n                otoken.collateralAsset(),\\n                otoken.expiryTimestamp()\\n            );\\n\\n        if (!settlementAllowed) {\\n            return false;\\n        }\\n        // use `0` as the optionID because it doesn't do anything for exerciseProfit\\n        if (exerciseProfit(options, 0, amount) > 0) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Stubbed out for conforming to the IProtocolAdapter interface.\\n     */\\n    function purchase(\\n        ProtocolAdapterTypes.OptionTerms calldata,\\n        uint256,\\n        uint256\\n    ) external payable override returns (uint256) {}\\n\\n    /**\\n     * @notice Purchases otokens using a 0x order struct\\n     * It is the obligation of the delegate-calling contract to return the remaining\\n     * msg.value back to the user.\\n     * @param optionTerms is the terms of the option contract\\n     * @param zeroExOrder is the 0x order struct constructed using the 0x API response passed by the frontend.\\n     */\\n    function purchaseWithZeroEx(\\n        ProtocolAdapterTypes.OptionTerms calldata optionTerms,\\n        ProtocolAdapterTypes.ZeroExOrder calldata zeroExOrder\\n    ) external payable {\\n        require(\\n            msg.value >= zeroExOrder.protocolFee,\\n            \\\"Value cannot cover protocolFee\\\"\\n        );\\n        require(\\n            zeroExOrder.sellTokenAddress == USDC,\\n            \\\"Sell token has to be USDC\\\"\\n        );\\n\\n        IUniswapV2Router02 router = IUniswapV2Router02(UNISWAP_ROUTER);\\n\\n        address[] memory path = new address[](2);\\n        path[0] = WETH;\\n        path[1] = zeroExOrder.sellTokenAddress;\\n\\n        (, int256 latestPrice, , , ) = USDCETHPriceFeed.latestRoundData();\\n\\n        // Because we guard that zeroExOrder.sellTokenAddress == USDC\\n        // We can assume that the decimals == 6\\n        uint256 soldETH =\\n            zeroExOrder.takerAssetAmount.mul(uint256(latestPrice)).div(\\n                10**assetDecimals(zeroExOrder.sellTokenAddress)\\n            );\\n\\n        router.swapETHForExactTokens{value: soldETH}(\\n            zeroExOrder.takerAssetAmount,\\n            path,\\n            address(this),\\n            block.timestamp + SWAP_WINDOW\\n        );\\n\\n        require(\\n            IERC20(zeroExOrder.sellTokenAddress).balanceOf(address(this)) >=\\n                zeroExOrder.takerAssetAmount,\\n            \\\"Not enough takerAsset balance\\\"\\n        );\\n\\n        // double approve to fix non-compliant ERC20s\\n        IERC20(zeroExOrder.sellTokenAddress).safeApprove(\\n            zeroExOrder.allowanceTarget,\\n            0\\n        );\\n        IERC20(zeroExOrder.sellTokenAddress).safeApprove(\\n            zeroExOrder.allowanceTarget,\\n            zeroExOrder.takerAssetAmount\\n        );\\n\\n        require(\\n            address(this).balance >= zeroExOrder.protocolFee,\\n            \\\"Not enough balance for protocol fee\\\"\\n        );\\n\\n        (bool success, ) =\\n            ZERO_EX_EXCHANGE_V3.call{value: zeroExOrder.protocolFee}(\\n                zeroExOrder.swapData\\n            );\\n\\n        require(success, \\\"0x swap failed\\\");\\n\\n        require(\\n            IERC20(zeroExOrder.buyTokenAddress).balanceOf(address(this)) >=\\n                zeroExOrder.makerAssetAmount,\\n            \\\"Not enough buyToken balance\\\"\\n        );\\n\\n        emit Purchased(\\n            msg.sender,\\n            _name,\\n            optionTerms.underlying,\\n            soldETH.add(zeroExOrder.protocolFee),\\n            0\\n        );\\n    }\\n\\n    /**\\n     * @notice Exercises the options contract.\\n     * @param options is the address of the options contract\\n     * @param amount is the amount of tokens or options contract to exercise.\\n     *        Only relevant for fungle protocols like Opyn\\n     * @param recipient is the account that receives the exercised profits.\\n     *        This is needed since the adapter holds all the positions and the msg.sender is an instrument contract.\\n     */\\n    function exercise(\\n        address options,\\n        uint256,\\n        uint256 amount,\\n        address recipient\\n    ) public payable override {\\n        OtokenInterface otoken = OtokenInterface(options);\\n\\n        require(\\n            block.timestamp >= otoken.expiryTimestamp(),\\n            \\\"oToken not expired yet\\\"\\n        );\\n\\n        // Since we accept all amounts in 10**18, we need to normalize it down to the decimals otokens use (10**8)\\n        uint256 scaledAmount = amount.div(10**10);\\n\\n        // use `0` as the optionID because it doesn't do anything for exerciseProfit\\n        uint256 profit = exerciseProfit(options, 0, amount);\\n\\n        require(profit > 0, \\\"Not profitable to exercise\\\");\\n\\n        IController.ActionArgs memory action =\\n            IController.ActionArgs(\\n                IController.ActionType.Redeem,\\n                address(this), // owner\\n                address(this), // receiver -  we need this contract to receive so we can swap at the end\\n                options, // asset, otoken\\n                0, // vaultId\\n                scaledAmount,\\n                0, //index\\n                \\\"\\\" //data\\n            );\\n\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](1);\\n        actions[0] = action;\\n\\n        IController(gammaController).operate(actions);\\n\\n        uint256 profitInUnderlying =\\n            swapExercisedProfitsToUnderlying(options, profit, recipient);\\n\\n        emit Exercised(msg.sender, options, 0, amount, profitInUnderlying);\\n    }\\n\\n    /**\\n     * @notice Swaps the exercised profit (originally in the collateral token) into the `underlying` token.\\n     *         This simplifies the payout of an option. Put options pay out in USDC, so we swap USDC back\\n     *         into WETH and transfer it to the recipient.\\n     * @param otokenAddress is the otoken's address\\n     * @param profitInCollateral is the profit after exercising\\n     *        denominated in the collateral - this could be a token with different decimals\\n     * @param recipient is the recipient of the underlying tokens after the swap\\n     */\\n    function swapExercisedProfitsToUnderlying(\\n        address otokenAddress,\\n        uint256 profitInCollateral,\\n        address recipient\\n    ) internal returns (uint256 profitInUnderlying) {\\n        OtokenInterface otoken = OtokenInterface(otokenAddress);\\n        address collateral = otoken.collateralAsset();\\n        IERC20 collateralToken = IERC20(collateral);\\n\\n        require(\\n            collateralToken.balanceOf(address(this)) >= profitInCollateral,\\n            \\\"Not enough collateral from exercising\\\"\\n        );\\n\\n        IUniswapV2Router02 router = IUniswapV2Router02(UNISWAP_ROUTER);\\n\\n        IWETH weth = IWETH(WETH);\\n\\n        if (collateral == address(weth)) {\\n            profitInUnderlying = profitInCollateral;\\n            weth.withdraw(profitInCollateral);\\n            (bool success, ) = recipient.call{value: profitInCollateral}(\\\"\\\");\\n            require(success, \\\"Failed to transfer exercise profit\\\");\\n        } else {\\n            // just guard against anything that's not USDC\\n            // we will revisit opening up other collateral types for puts\\n            // when they get added\\n            require(collateral == USDC, \\\"!USDC\\\");\\n\\n            address[] memory path = new address[](2);\\n            path[0] = collateral;\\n            path[1] = address(weth);\\n\\n            (, int256 latestPrice, , , ) = USDCETHPriceFeed.latestRoundData();\\n\\n            profitInUnderlying = wdiv(profitInCollateral, uint256(latestPrice))\\n                .mul(10**assetDecimals(collateral));\\n\\n            require(profitInUnderlying > 0, \\\"Swap is unprofitable\\\");\\n\\n            IERC20(collateral).safeApprove(UNISWAP_ROUTER, profitInCollateral);\\n\\n            uint256[] memory amountsOut =\\n                router.swapExactTokensForETH(\\n                    profitInCollateral,\\n                    wmul(profitInUnderlying, SLIPPAGE_TOLERANCE),\\n                    path,\\n                    recipient,\\n                    block.timestamp + SWAP_WINDOW\\n                );\\n\\n            profitInUnderlying = amountsOut[1];\\n        }\\n    }\\n\\n    /**\\n     * @notice Creates a short otoken position by opening a vault, depositing collateral and minting otokens.\\n     * The sale of otokens is left to the caller contract to perform.\\n     * @param optionTerms is the terms of the option contract\\n     * @param depositAmount is the amount deposited to open the vault.\\n     *        This amount will determine how much otokens to mint.\\n     */\\n    function createShort(\\n        ProtocolAdapterTypes.OptionTerms calldata optionTerms,\\n        uint256 depositAmount\\n    ) external override returns (uint256) {\\n        IController controller = IController(gammaController);\\n        uint256 newVaultID =\\n            (controller.getAccountVaultCounter(address(this))).add(1);\\n\\n        address oToken = lookupOToken(optionTerms);\\n        require(oToken != address(0), \\\"Invalid oToken\\\");\\n\\n        address collateralAsset = optionTerms.collateralAsset;\\n        if (collateralAsset == address(0)) {\\n            collateralAsset = WETH;\\n        }\\n        IERC20 collateralToken = IERC20(collateralAsset);\\n\\n        uint256 collateralDecimals =\\n            uint256(IERC20Detailed(collateralAsset).decimals());\\n        uint256 mintAmount;\\n\\n        if (optionTerms.optionType == ProtocolAdapterTypes.OptionType.Call) {\\n            mintAmount = depositAmount;\\n            uint256 scaleBy = 10**(collateralDecimals.sub(8)); // oTokens have 8 decimals\\n\\n            if (mintAmount > scaleBy && collateralDecimals > 8) {\\n                mintAmount = depositAmount.div(scaleBy); // scale down from 10**18 to 10**8\\n                require(\\n                    mintAmount > 0,\\n                    \\\"Must deposit more than 10**8 collateral\\\"\\n                );\\n            }\\n        } else {\\n            // For minting puts, there will be instances where the full depositAmount will not be used for minting.\\n            // This is because of an issue with precision.\\n            //\\n            // For ETH put options, we are calculating the mintAmount (10**8 decimals) using\\n            // the depositAmount (10**18 decimals), which will result in truncation of decimals when scaling down.\\n            // As a result, there will be tiny amounts of dust left behind in the Opyn vault when minting put otokens.\\n            //\\n            // For simplicity's sake, we do not refund the dust back to the address(this) on minting otokens.\\n            // We retain the dust in the vault so the calling contract can withdraw the\\n            // actual locked amount + dust at settlement.\\n            //\\n            // To test this behavior, we can console.log\\n            // MarginCalculatorInterface(0x7A48d10f372b3D7c60f6c9770B91398e4ccfd3C7).getExcessCollateral(vault)\\n            // to see how much dust (or excess collateral) is left behind.\\n            mintAmount = wdiv(\\n                depositAmount.mul(OTOKEN_DECIMALS),\\n                optionTerms\\n                    .strikePrice\\n            )\\n                .div(10**collateralDecimals);\\n        }\\n\\n        // double approve to fix non-compliant ERC20s\\n        collateralToken.safeApprove(MARGIN_POOL, depositAmount);\\n\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](3);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.OpenVault,\\n            address(this), // owner\\n            address(this), // receiver -  we need this contract to receive so we can swap at the end\\n            address(0), // asset, otoken\\n            newVaultID, // vaultId\\n            0, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[1] = IController.ActionArgs(\\n            IController.ActionType.DepositCollateral,\\n            address(this), // owner\\n            address(this), // address to transfer from\\n            collateralAsset, // deposited asset\\n            newVaultID, // vaultId\\n            depositAmount, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[2] = IController.ActionArgs(\\n            IController.ActionType.MintShortOption,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            oToken, // deposited asset\\n            newVaultID, // vaultId\\n            mintAmount, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        controller.operate(actions);\\n\\n        return mintAmount;\\n    }\\n\\n    /**\\n     * @notice Close the existing short otoken position. Currently this implementation is simple.\\n     * It closes the most recent vault opened by the contract. This assumes that the contract will\\n     * only have a single vault open at any given time. Since calling `closeShort` deletes vaults,\\n     * this assumption should hold.\\n     */\\n    function closeShort() external override returns (uint256) {\\n        IController controller = IController(gammaController);\\n\\n        // gets the currently active vault ID\\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\\n\\n        GammaTypes.Vault memory vault =\\n            controller.getVault(address(this), vaultID);\\n\\n        require(vault.shortOtokens.length > 0, \\\"No active short\\\");\\n\\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\\n        OtokenInterface otoken = OtokenInterface(vault.shortOtokens[0]);\\n\\n        bool settlementAllowed =\\n            isSettlementAllowed(\\n                otoken.underlyingAsset(),\\n                otoken.collateralAsset(),\\n                otoken.expiryTimestamp()\\n            );\\n\\n        uint256 startCollateralBalance =\\n            collateralToken.balanceOf(address(this));\\n\\n        IController.ActionArgs[] memory actions;\\n\\n        // If it is after expiry, we need to settle the short position using the normal way\\n        // Delete the vault and withdraw all remaining collateral from the vault\\n        //\\n        // If it is before expiry, we need to burn otokens in order to withdraw collateral from the vault\\n        if (settlementAllowed) {\\n            actions = new IController.ActionArgs[](1);\\n\\n            actions[0] = IController.ActionArgs(\\n                IController.ActionType.SettleVault,\\n                address(this), // owner\\n                address(this), // address to transfer to\\n                address(0), // not used\\n                vaultID, // vaultId\\n                0, // not used\\n                0, // not used\\n                \\\"\\\" // not used\\n            );\\n\\n            controller.operate(actions);\\n        } else {\\n            // Burning otokens given by vault.shortAmounts[0] (closing the entire short position),\\n            // then withdrawing all the collateral from the vault\\n            actions = new IController.ActionArgs[](2);\\n\\n            actions[0] = IController.ActionArgs(\\n                IController.ActionType.BurnShortOption,\\n                address(this), // owner\\n                address(this), // address to transfer to\\n                address(otoken), // otoken address\\n                vaultID, // vaultId\\n                vault.shortAmounts[0], // amount\\n                0, //index\\n                \\\"\\\" //data\\n            );\\n\\n            actions[1] = IController.ActionArgs(\\n                IController.ActionType.WithdrawCollateral,\\n                address(this), // owner\\n                address(this), // address to transfer to\\n                address(collateralToken), // withdrawn asset\\n                vaultID, // vaultId\\n                vault.collateralAmounts[0], // amount\\n                0, //index\\n                \\\"\\\" //data\\n            );\\n\\n            controller.operate(actions);\\n        }\\n\\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\\n\\n        return endCollateralBalance.sub(startCollateralBalance);\\n    }\\n\\n    /**\\n     * @notice Gas-optimized getter for checking if settlement is allowed.\\n     * Looks up from the oracles with asset address and expiry\\n     * @param underlying is the address of the underlying for an otoken\\n     * @param collateral is the address of the collateral for an otoken\\n     * @param expiry is the timestamp of the otoken's expiry\\n     */\\n    function isSettlementAllowed(\\n        address underlying,\\n        address collateral,\\n        uint256 expiry\\n    ) private view returns (bool) {\\n        IController controller = IController(gammaController);\\n        OracleInterface oracle = OracleInterface(controller.oracle());\\n\\n        bool underlyingFinalized =\\n            oracle.isDisputePeriodOver(underlying, expiry);\\n\\n        bool collateralFinalized =\\n            (underlying != collateral && collateral != USDC)\\n                ? oracle.isDisputePeriodOver(collateral, expiry)\\n                : true;\\n\\n        bool strikeFinalized = oracle.isDisputePeriodOver(USDC, expiry);\\n\\n        // We can avoid checking the dispute period for the collateral for now\\n        // Because the collateral is either the underlying or USDC at this point\\n        // We do not have, for example, ETH-collateralized UNI otoken vaults\\n        // bool collateralFinalized = oracle.isDisputePeriodOver(isPut ? USDC : underlying, expiry);\\n\\n        return underlyingFinalized && strikeFinalized && collateralFinalized;\\n    }\\n\\n    /**\\n     * @notice Helper function to get the decimals of an asset. Will just hardcode for the time being.\\n     * @param asset is the token which we want to know the decimals\\n     */\\n    function assetDecimals(address asset) private view returns (uint256) {\\n        // USDC\\n        if (asset == USDC) {\\n            return 6;\\n        }\\n        return 18;\\n    }\\n\\n    /**\\n     * @notice Function to lookup oToken addresses. oToken addresses are keyed by an ABI-encoded byte string\\n     * @param optionTerms is the terms of the option contract\\n     */\\n    function lookupOToken(ProtocolAdapterTypes.OptionTerms memory optionTerms)\\n        public\\n        view\\n        returns (address oToken)\\n    {\\n        IOtokenFactory factory = IOtokenFactory(oTokenFactory);\\n\\n        bool isPut =\\n            optionTerms.optionType == ProtocolAdapterTypes.OptionType.Put;\\n        address underlying = optionTerms.underlying;\\n\\n        /**\\n         * In many instances, we just use 0x0 to indicate ETH as the underlying asset.\\n         * We need to unify usage of 0x0 as WETH instead.\\n         */\\n        if (optionTerms.underlying == address(0)) {\\n            underlying = WETH;\\n        }\\n\\n        oToken = factory.getOtoken(\\n            underlying,\\n            optionTerms.strikeAsset,\\n            optionTerms.collateralAsset,\\n            optionTerms.strikePrice.div(10**10),\\n            optionTerms.expiry,\\n            isPut\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x9d9ac468903c1077e58634a6d72166b5f51991909be9332c2fd576f37e3aa599\",\"license\":\"MIT\"},\"contracts/adapters/IProtocolAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.2;\\npragma experimental ABIEncoderV2;\\n\\nlibrary ProtocolAdapterTypes {\\n    enum OptionType {Invalid, Put, Call}\\n\\n    // We have 2 types of purchase methods so far - by contract and by 0x.\\n    // Contract is simple because it involves just specifying the option terms you want to buy.\\n    // ZeroEx involves an off-chain API call which prepares a ZeroExOrder object to be passed into the tx.\\n    enum PurchaseMethod {Invalid, Contract, ZeroEx}\\n\\n    /**\\n     * @notice Terms of an options contract\\n     * @param underlying is the underlying asset of the options. E.g. For ETH $800 CALL, ETH is the underlying.\\n     * @param strikeAsset is the asset used to denote the asset paid out when exercising the option.\\n     *        E.g. For ETH $800 CALL, USDC is the strikeAsset.\\n     * @param collateralAsset is the asset used to collateralize a short position for the option.\\n     * @param expiry is the expiry of the option contract. Users can only exercise after expiry in Europeans.\\n     * @param strikePrice is the strike price of an optio contract.\\n     *        E.g. For ETH $800 CALL, 800*10**18 is the USDC.\\n     * @param optionType is the type of option, can only be OptionType.Call or OptionType.Put\\n     * @param paymentToken is the token used to purchase the option.\\n     *        E.g. Buy UNI/USDC CALL with WETH as the paymentToken.\\n     */\\n    struct OptionTerms {\\n        address underlying;\\n        address strikeAsset;\\n        address collateralAsset;\\n        uint256 expiry;\\n        uint256 strikePrice;\\n        ProtocolAdapterTypes.OptionType optionType;\\n        address paymentToken;\\n    }\\n\\n    /**\\n     * @notice 0x order for purchasing otokens\\n     * @param exchangeAddress [deprecated] is the address we call to conduct a 0x trade.\\n     * Slither flagged this as a potential vulnerability so we hardcoded it.\\n     * @param buyTokenAddress is the otoken address\\n     * @param sellTokenAddress is the token used to purchase USDC. This is USDC most of the time.\\n     * @param allowanceTarget is the address the adapter needs to provide sellToken allowance to so the swap happens\\n     * @param protocolFee is the fee paid (in ETH) when conducting the trade\\n     * @param makerAssetAmount is the buyToken amount\\n     * @param takerAssetAmount is the sellToken amount\\n     * @param swapData is the encoded msg.data passed by the 0x api response\\n     */\\n    struct ZeroExOrder {\\n        address exchangeAddress;\\n        address buyTokenAddress;\\n        address sellTokenAddress;\\n        address allowanceTarget;\\n        uint256 protocolFee;\\n        uint256 makerAssetAmount;\\n        uint256 takerAssetAmount;\\n        bytes swapData;\\n    }\\n}\\n\\ninterface IProtocolAdapter {\\n    /**\\n     * @notice Emitted when a new option contract is purchased\\n     */\\n    event Purchased(\\n        address indexed caller,\\n        string indexed protocolName,\\n        address indexed underlying,\\n        uint256 amount,\\n        uint256 optionID\\n    );\\n\\n    /**\\n     * @notice Emitted when an option contract is exercised\\n     */\\n    event Exercised(\\n        address indexed caller,\\n        address indexed options,\\n        uint256 indexed optionID,\\n        uint256 amount,\\n        uint256 exerciseProfit\\n    );\\n\\n    /**\\n     * @notice Name of the adapter. E.g. \\\"HEGIC\\\", \\\"OPYN_V1\\\". Used as index key for adapter addresses\\n     */\\n    function protocolName() external pure returns (string memory);\\n\\n    /**\\n     * @notice Boolean flag to indicate whether to use option IDs or not.\\n     * Fungible protocols normally use tokens to represent option contracts.\\n     */\\n    function nonFungible() external pure returns (bool);\\n\\n    /**\\n     * @notice Returns the purchase method used to purchase options\\n     */\\n    function purchaseMethod()\\n        external\\n        pure\\n        returns (ProtocolAdapterTypes.PurchaseMethod);\\n\\n    /**\\n     * @notice Check if an options contract exist based on the passed parameters.\\n     * @param optionTerms is the terms of the option contract\\n     */\\n    function optionsExist(ProtocolAdapterTypes.OptionTerms calldata optionTerms)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Get the options contract's address based on the passed parameters\\n     * @param optionTerms is the terms of the option contract\\n     */\\n    function getOptionsAddress(\\n        ProtocolAdapterTypes.OptionTerms calldata optionTerms\\n    ) external view returns (address);\\n\\n    /**\\n     * @notice Gets the premium to buy `purchaseAmount` of the option contract in ETH terms.\\n     * @param optionTerms is the terms of the option contract\\n     * @param purchaseAmount is the number of options purchased\\n     */\\n    function premium(\\n        ProtocolAdapterTypes.OptionTerms calldata optionTerms,\\n        uint256 purchaseAmount\\n    ) external view returns (uint256 cost);\\n\\n    /**\\n     * @notice Amount of profit made from exercising an option contract (current price - strike price).\\n     *         0 if exercising out-the-money.\\n     * @param options is the address of the options contract\\n     * @param optionID is the ID of the option position in non fungible protocols like Hegic.\\n     * @param amount is the amount of tokens or options contract to exercise.\\n     */\\n    function exerciseProfit(\\n        address options,\\n        uint256 optionID,\\n        uint256 amount\\n    ) external view returns (uint256 profit);\\n\\n    function canExercise(\\n        address options,\\n        uint256 optionID,\\n        uint256 amount\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Purchases the options contract.\\n     * @param optionTerms is the terms of the option contract\\n     * @param amount is the purchase amount in Wad units (10**18)\\n     */\\n    function purchase(\\n        ProtocolAdapterTypes.OptionTerms calldata optionTerms,\\n        uint256 amount,\\n        uint256 maxCost\\n    ) external payable returns (uint256 optionID);\\n\\n    /**\\n     * @notice Exercises the options contract.\\n     * @param options is the address of the options contract\\n     * @param optionID is the ID of the option position in non fungible protocols like Hegic.\\n     * @param amount is the amount of tokens or options contract to exercise.\\n     * @param recipient is the account that receives the exercised profits.\\n     * This is needed since the adapter holds all the positions\\n     */\\n    function exercise(\\n        address options,\\n        uint256 optionID,\\n        uint256 amount,\\n        address recipient\\n    ) external payable;\\n\\n    /**\\n     * @notice Opens a short position for a given `optionTerms`.\\n     * @param optionTerms is the terms of the option contract\\n     * @param amount is the short position amount\\n     */\\n    function createShort(\\n        ProtocolAdapterTypes.OptionTerms calldata optionTerms,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Closes an existing short position. In the future,\\n     * we may want to open this up to specifying a particular short position to close.\\n     */\\n    function closeShort() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x269eed7afa1da29c1484afc0e1ae82b66303e1f674048c2fc7b2cc38dcdb20e7\",\"license\":\"MIT\"},\"contracts/interfaces/GammaInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.2;\\npragma experimental ABIEncoderV2;\\n\\nlibrary GammaTypes {\\n    // vault is a struct of 6 arrays that describe a position a user has, a user can have multiple vaults.\\n    struct Vault {\\n        // addresses of oTokens a user has shorted (i.e. written) against this vault\\n        address[] shortOtokens;\\n        // addresses of oTokens a user has bought and deposited in this vault\\n        // user can be long oTokens without opening a vault (e.g. by buying on a DEX)\\n        // generally, long oTokens will be 'deposited' in vaults to act as collateral\\n        // in order to write oTokens against (i.e. in spreads)\\n        address[] longOtokens;\\n        // addresses of other ERC-20s a user has deposited as collateral in this vault\\n        address[] collateralAssets;\\n        // quantity of oTokens minted/written for each oToken address in shortOtokens\\n        uint256[] shortAmounts;\\n        // quantity of oTokens owned and held in the vault for each oToken address in longOtokens\\n        uint256[] longAmounts;\\n        // quantity of ERC-20 deposited as collateral in the vault for each ERC-20 address in collateralAssets\\n        uint256[] collateralAmounts;\\n    }\\n}\\n\\ninterface OtokenInterface {\\n    function addressBook() external view returns (address);\\n\\n    function underlyingAsset() external view returns (address);\\n\\n    function strikeAsset() external view returns (address);\\n\\n    function collateralAsset() external view returns (address);\\n\\n    function strikePrice() external view returns (uint256);\\n\\n    function expiryTimestamp() external view returns (uint256);\\n\\n    function isPut() external view returns (bool);\\n\\n    function init(\\n        address _addressBook,\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external;\\n\\n    function mintOtoken(address account, uint256 amount) external;\\n\\n    function burnOtoken(address account, uint256 amount) external;\\n}\\n\\ninterface IOtokenFactory {\\n    event OtokenCreated(\\n        address tokenAddress,\\n        address creator,\\n        address indexed underlying,\\n        address indexed strike,\\n        address indexed collateral,\\n        uint256 strikePrice,\\n        uint256 expiry,\\n        bool isPut\\n    );\\n\\n    function oTokens(uint256 index) external returns (address);\\n\\n    function getOtokensLength() external view returns (uint256);\\n\\n    function getOtoken(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external view returns (address);\\n\\n    function createOtoken(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external returns (address);\\n}\\n\\ninterface IController {\\n    // possible actions that can be performed\\n    enum ActionType {\\n        OpenVault,\\n        MintShortOption,\\n        BurnShortOption,\\n        DepositLongOption,\\n        WithdrawLongOption,\\n        DepositCollateral,\\n        WithdrawCollateral,\\n        SettleVault,\\n        Redeem,\\n        Call\\n    }\\n\\n    struct ActionArgs {\\n        // type of action that is being performed on the system\\n        ActionType actionType;\\n        // address of the account owner\\n        address owner;\\n        // address which we move assets from or to (depending on the action type)\\n        address secondAddress;\\n        // asset that is to be transfered\\n        address asset;\\n        // index of the vault that is to be modified (if any)\\n        uint256 vaultId;\\n        // amount of asset that is to be transfered\\n        uint256 amount;\\n        // each vault can hold multiple short / long / collateral assets\\n        // but we are restricting the scope to only 1 of each in this version\\n        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\\n        uint256 index;\\n        // any other data that needs to be passed in for arbitrary function calls\\n        bytes data;\\n    }\\n\\n    struct RedeemArgs {\\n        // address to which we pay out the oToken proceeds\\n        address receiver;\\n        // oToken that is to be redeemed\\n        address otoken;\\n        // amount of oTokens that is to be redeemed\\n        uint256 amount;\\n    }\\n\\n    function getPayout(address _otoken, uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function operate(ActionArgs[] calldata _actions) external;\\n\\n    function getAccountVaultCounter(address owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function oracle() external view returns (address);\\n\\n    function getVault(address _owner, uint256 _vaultId)\\n        external\\n        view\\n        returns (GammaTypes.Vault memory);\\n\\n    function getProceed(address _owner, uint256 _vaultId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isSettlementAllowed(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        uint256 _expiry\\n    ) external view returns (bool);\\n}\\n\\ninterface OracleInterface {\\n    function isLockingPeriodOver(address _asset, uint256 _expiryTimestamp)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isDisputePeriodOver(address _asset, uint256 _expiryTimestamp)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getExpiryPrice(address _asset, uint256 _expiryTimestamp)\\n        external\\n        view\\n        returns (uint256, bool);\\n\\n    function getDisputer() external view returns (address);\\n\\n    function getPricer(address _asset) external view returns (address);\\n\\n    function getPrice(address _asset) external view returns (uint256);\\n\\n    function getPricerLockingPeriod(address _pricer)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPricerDisputePeriod(address _pricer)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Non-view function\\n\\n    function setAssetPricer(address _asset, address _pricer) external;\\n\\n    function setLockingPeriod(address _pricer, uint256 _lockingPeriod) external;\\n\\n    function setDisputePeriod(address _pricer, uint256 _disputePeriod) external;\\n\\n    function setExpiryPrice(\\n        address _asset,\\n        uint256 _expiryTimestamp,\\n        uint256 _price\\n    ) external;\\n\\n    function disputeExpiryPrice(\\n        address _asset,\\n        uint256 _expiryTimestamp,\\n        uint256 _price\\n    ) external;\\n\\n    function setDisputer(address _disputer) external;\\n}\\n\\ninterface MarginCalculatorInterface {\\n    function addressBook() external view returns (address);\\n\\n    function getExpiredPayoutRate(address _otoken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getExcessCollateral(GammaTypes.Vault calldata _vault)\\n        external\\n        view\\n        returns (uint256 netValue, bool isExcess);\\n}\\n\\ninterface IGammaWhitelist {\\n    function whitelistCollateral(address _collateral) external;\\n\\n    function whitelistProduct(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        bool _isPut\\n    ) external;\\n}\\n\",\"keccak256\":\"0x50cc53448b4167084634238648da00591560c66c4d9bdc1764bafe14a285459d\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.2;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Detailed is IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string calldata);\\n}\\n\",\"keccak256\":\"0x038ce63f2e5081a514c823b7db716e52a55bb65484f945fb3ee9b01eb409cab0\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x55eafb1688432efd6ed3ff95893c1f8ccbb9f34ea5a9862551ec4ef94e53a088\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.2;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x285879e809224dcb6a168c9309dbe202c01961c88554f19348f5504218a88284\",\"license\":\"MIT\"},\"contracts/lib/CustomSafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.2;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(token.transfer(to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(token.transferFrom(from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        if (\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(token.approve.selector, spender, value)\\n            )\\n        ) {\\n            return;\\n        }\\n        require(\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(token.approve.selector, spender, 0)\\n            ) &&\\n                _callOptionalReturn(\\n                    token,\\n                    abi.encodeWithSelector(\\n                        token.approve.selector,\\n                        spender,\\n                        value\\n                    )\\n                ),\\n            \\\"ERC20 approve failed\\\"\\n        );\\n    }\\n\\n    function _callOptionalReturn(IERC20 token, bytes memory data)\\n        private\\n        returns (bool)\\n    {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        if (!success) {\\n            return false;\\n        }\\n\\n        if (returndata.length >= 32) {\\n            // Return data is optional\\n            return abi.decode(returndata, (bool));\\n        }\\n\\n        // In a wierd case when return data is 1-31 bytes long - return false.\\n        return returndata.length == 0;\\n    }\\n}\\n\",\"keccak256\":\"0x12f1871339529834e04ec62459a19a10c7bc14cb4442fe9d25882ddd9d8c5532\",\"license\":\"MIT\"},\"contracts/lib/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >0.4.13;\\n\\ncontract DSMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        return x <= y ? x : y;\\n    }\\n    function max(uint x, uint y) internal pure returns (uint z) {\\n        return x >= y ? x : y;\\n    }\\n    function imin(int x, int y) internal pure returns (int z) {\\n        return x <= y ? x : y;\\n    }\\n    function imax(int x, int y) internal pure returns (int z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    uint constant WAD = 10 ** 18;\\n    uint constant RAY = 10 ** 27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n    //rounds to zero if x*y < WAD / 2\\n    function rmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    function rpow(uint x, uint n) internal pure returns (uint z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xf1a1e893d9abf2382fee9219dc84881eb6ba9ae9d7bf9aa72511537833ab1d26\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101806040523480156200001257600080fd5b5060405162003c2738038062003c278339810160408190526200003591620001f5565b6001600160a01b038816620000675760405162461bcd60e51b81526004016200005e906200033d565b60405180910390fd5b6001600160a01b038716620000905760405162461bcd60e51b81526004016200005e906200029c565b6001600160a01b038616620000b95760405162461bcd60e51b81526004016200005e906200038f565b6001600160a01b038516620000e25760405162461bcd60e51b81526004016200005e90620002e7565b6001600160a01b0384166200010b5760405162461bcd60e51b81526004016200005e9062000366565b6001600160a01b038316620001345760405162461bcd60e51b81526004016200005e90620002c7565b6001600160a01b0382166200015d5760405162461bcd60e51b81526004016200005e90620003b5565b6001600160a01b038116620001865760405162461bcd60e51b81526004016200005e9062000313565b6001600160601b0319606098891b811660a05296881b871660805294871b861660c05292861b851660e05290851b841661010052841b831661012052831b82166101405290911b1661016052620003d5565b80516001600160a01b0381168114620001f057600080fd5b919050565b600080600080600080600080610100898b03121562000212578384fd5b6200021d89620001d8565b97506200022d60208a01620001d8565b96506200023d60408a01620001d8565b95506200024d60608a01620001d8565b94506200025d60808a01620001d8565b93506200026d60a08a01620001d8565b92506200027d60c08a01620001d8565b91506200028d60e08a01620001d8565b90509295985092959890939650565b60208082526011908201527010afb3b0b6b6b0a1b7b73a3937b63632b960791b604082015260600190565b602080825260069082015265042beeecae8d60d31b604082015260600190565b6020808252601290820152710857dd5cd918d15d1a141c9a58d95199595960721b604082015260600190565b60208082526010908201526f215f7a65726f457845786368616e676560801b604082015260600190565b6020808252600f908201526e215f6f546f6b656e466163746f727960881b604082015260600190565b6020808252600f908201526e10afbab734b9bbb0b82937baba32b960891b604082015260600190565b6020808252600c908201526b0857db585c99da5b941bdbdb60a21b604082015260600190565b602080825260069082015265215f7573646360d01b604082015260600190565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c6101405160601c6101605160601c61376e620004b9600039806107765280610b835250806107c652806112ac52806120e15280612388528061268552806127585250806103f352806108635280610ece52806112d05280611fc952508061082e528061182c5280611fa852806122955250806108e85280611e3852806121b0525080610d76528061101f5250806103aa52806114a85250806106a35280610d9a5280610dc152806114d85280611884528061254c525061376e6000f3fe6080604052600436106101395760003560e01c8063b63a3a6d116100ab578063d44544421161006f578063d445444214610312578063d460094d14610325578063d826492014610345578063e567e8691461035a578063f8432a1b1461037c578063fbd49c661461039157610140565b8063b63a3a6d14610286578063b9e9683b146102a6578063bce3393f146102c6578063c2d8506b146102db578063ca60bcb8146102fd57610140565b80636abf4c5e116100fd5780636abf4c5e146101cd5780636c3fac58146101e25780636e2ccc521461020f57806381390d6b1461022f57806389a302711461025c578063ad5c46481461027157610140565b80630216db00146101455780631984a8051461017b5780632e12c8bb146101905780633afb78e1146101a5578063650cce8a146101b857610140565b3661014057005b600080fd5b34801561015157600080fd5b50610165610160366004612cde565b6103a6565b6040516101729190612fc6565b60405180910390f35b61018e610189366004612b50565b6104c9565b005b34801561019c57600080fd5b50610165610774565b61018e6101b3366004612c29565b610798565b3480156101c457600080fd5b50610165610d74565b3480156101d957600080fd5b50610165610d98565b3480156101ee57600080fd5b506102026101fd366004612c7e565b610dbc565b60405161017291906135da565b34801561021b57600080fd5b5061016561022a366004612c0e565b611268565b34801561023b57600080fd5b5061024f61024a366004612c0e565b611284565b604051610172919061311e565b34801561026857600080fd5b506101656112aa565b34801561027d57600080fd5b506101656112ce565b34801561029257600080fd5b506102026102a1366004612c7e565b6112f2565b3480156102b257600080fd5b5061024f6102c1366004612b1c565b6112fa565b3480156102d257600080fd5b5061024f61149c565b3480156102e757600080fd5b506102f06114a1565b6040516101729190613129565b34801561030957600080fd5b506101656114a6565b610202610320366004612ca9565b6114ca565b34801561033157600080fd5b50610202610340366004612b1c565b6114d3565b34801561035157600080fd5b5061016561182a565b34801561036657600080fd5b5061036f61184e565b604051610172919061313d565b34801561038857600080fd5b50610202611872565b34801561039d57600080fd5b50610165611e36565b60007f00000000000000000000000000000000000000000000000000000000000000008160018460a0015160028111156103dc57fe5b8551911491506001600160a01b03811661041357507f00000000000000000000000000000000000000000000000000000000000000005b826001600160a01b0316631154705482876020015188604001516104496402540be4008b60800151611e5a90919063ffffffff16565b8a60600151886040518763ffffffff1660e01b815260040161047096959493929190612ff3565b60206040518083038186803b15801561048857600080fd5b505afa15801561049c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c09190612b00565b95945050505050565b6000849050806001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561050757600080fd5b505afa15801561051b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053f9190612e93565b4210156105675760405162461bcd60e51b815260040161055e90613351565b60405180910390fd5b6000610578846402540be400611e5a565b90506000610588876000876114d3565b9050600081116105aa5760405162461bcd60e51b815260040161055e906134d3565b6105b261292d565b6040805161010081019091528060088152602001306001600160a01b03168152602001306001600160a01b03168152602001896001600160a01b0316815260200160008152602001848152602001600081526020016040518060200160405280600081525081525090506060600167ffffffffffffffff8111801561063657600080fd5b5060405190808252806020026020018201604052801561067057816020015b61065d61292d565b8152602001906001900390816106555790505b509050818160008151811061068157fe5b6020908102919091010152604051635b0bf86360e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b617f0c6906106d8908490600401613048565b600060405180830381600087803b1580156106f257600080fd5b505af1158015610706573d6000803e3d6000fd5b5050505060006107178a8589611e8c565b905060008a6001600160a01b0316336001600160a01b03167fd7fc7dfb5428de5160681fa939d5257f9f24e27f5db993044185551c48c162b08b85604051610760929190613618565b60405180910390a450505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b80608001353410156107bc5760405162461bcd60e51b815260040161055e906131b5565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166107f66060830160408401612ae4565b6001600160a01b03161461081c5760405162461bcd60e51b815260040161055e90613459565b604080516002808252606080830184527f000000000000000000000000000000000000000000000000000000000000000093909291906020830190803683370190505090507f00000000000000000000000000000000000000000000000000000000000000008160008151811061088f57fe5b6001600160a01b03909216602092830291909101909101526108b76060840160408501612ae4565b816001815181106108c457fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561093f57600080fd5b505afa158015610953573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109779190612eab565b50505091505060006109b461099d8660400160208101906109989190612ae4565b612384565b600a0a6109ae60c0880135856123d0565b90611e5a565b9050836001600160a01b031663fb3bdb41828760c00135863061038442016040518663ffffffff1660e01b81526004016109f194939291906135e3565b6000604051808303818588803b158015610a0a57600080fd5b505af1158015610a1e573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052610a479190810190612b99565b5060c0850135610a5d6060870160408801612ae4565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610a889190612fc6565b60206040518083038186803b158015610aa057600080fd5b505afa158015610ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad89190612e93565b1015610af65760405162461bcd60e51b815260040161055e90613287565b610b2b610b096080870160608801612ae4565b6000610b1b6060890160408a01612ae4565b6001600160a01b0316919061240a565b610b53610b3e6080870160608801612ae4565b60c0870135610b1b6060890160408a01612ae4565b8460800135471015610b775760405162461bcd60e51b815260040161055e90613490565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166080870135610bb560e0890189613662565b604051610bc3929190612f97565b60006040518083038185875af1925050503d8060008114610c00576040519150601f19603f3d011682016040523d82523d6000602084013e610c05565b606091505b5050905080610c265760405162461bcd60e51b815260040161055e90613551565b60a0860135610c3b6040880160208901612ae4565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610c669190612fc6565b60206040518083038186803b158015610c7e57600080fd5b505afa158015610c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb69190612e93565b1015610cd45760405162461bcd60e51b815260040161055e90613150565b610ce16020880188612ae4565b6001600160a01b03166040518060400160405280600a8152602001694f50594e5f47414d4d4160b01b815250604051610d1a9190612fa7565b604051908190039020337fe68386c7f55bea7f76f0caf3b4b0ef33cf863275ed45fde6ebb411e7e4cfaba0610d538660808c01356124d1565b6000604051610d63929190613618565b60405180910390a450505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000807f000000000000000000000000000000000000000000000000000000000000000090506000610e6b6001836001600160a01b031663caa6d21a306040518263ffffffff1660e01b8152600401610e159190612fc6565b60206040518083038186803b158015610e2d57600080fd5b505afa158015610e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e659190612e93565b906124d1565b90506000610e8161016036889003880188612cde565b90506001600160a01b038116610ea95760405162461bcd60e51b815260040161055e906131ec565b6000610ebb6060880160408901612ae4565b90506001600160a01b038116610eee57507f00000000000000000000000000000000000000000000000000000000000000005b60008190506000826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2e57600080fd5b505afa158015610f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f669190612efa565b60ff16905060006002610f7f60c08c0160a08d01612bf4565b6002811115610f8a57fe5b1415610fea5750876000610f9f8360086124f6565b600a0a90508082118015610fb35750600883115b15610fe457610fc28a82611e5a565b915060008211610fe45760405162461bcd60e51b815260040161055e9061350a565b50611010565b61100d600a83900a6109ae6110038c6305f5e1006123d0565b8d6080013561251e565b90505b6110446001600160a01b0384167f00000000000000000000000000000000000000000000000000000000000000008b61240a565b60408051600380825260808201909252606091816020015b61106461292d565b81526020019060019003908161105c579050506040805161010081019091529091508060008152602001306001600160a01b03168152602001306001600160a01b0316815260200160006001600160a01b03168152602001888152602001600081526020016000815260200160405180602001604052806000815250815250816000815181106110f057fe5b60209081029190910101526040805161010081019091528060058152602001306001600160a01b03168152602001306001600160a01b03168152602001866001600160a01b031681526020018881526020018b815260200160008152602001604051806020016040528060008152508152508160018151811061116f57fe5b60209081029190910101526040805161010081019091528060018152602001306001600160a01b03168152602001306001600160a01b03168152602001876001600160a01b031681526020018881526020018381526020016000815260200160405180602001604052806000815250815250816002815181106111ee57fe5b6020908102919091010152604051635b0bf86360e11b81526001600160a01b0389169063b617f0c690611225908490600401613048565b600060405180830381600087803b15801561123f57600080fd5b505af1158015611253573d6000803e3d6000fd5b50939a50505050505050505050505b92915050565b600061127c61016036849003840184612cde565b90505b919050565b60008061129961016036859003850185612cde565b6001600160a01b0316141592915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600092915050565b600080849050600061145d826001600160a01b0316637158da7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561133e57600080fd5b505afa158015611352573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113769190612b00565b836001600160a01b031663aabaecd66040518163ffffffff1660e01b815260040160206040518083038186803b1580156113af57600080fd5b505afa1580156113c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e79190612b00565b846001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561142057600080fd5b505afa158015611434573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114589190612e93565b612547565b90508061146f57600092505050611495565b600061147d876000876114d3565b111561148e57600192505050611495565b6000925050505b9392505050565b600090565b600290565b7f000000000000000000000000000000000000000000000000000000000000000081565b60009392505050565b6000807f000000000000000000000000000000000000000000000000000000000000000090506000816001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561153457600080fd5b505afa158015611548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156c9190612b00565b905060008690506000826001600160a01b03166341976e09836001600160a01b0316637158da7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115bd57600080fd5b505afa1580156115d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f59190612b00565b6040518263ffffffff1660e01b81526004016116119190612fc6565b60206040518083038186803b15801561162957600080fd5b505afa15801561163d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116619190612e93565b90506000826001600160a01b031663c52987cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561169e57600080fd5b505afa1580156116b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d69190612e93565b90506000836001600160a01b031663f3c274a66040518163ffffffff1660e01b815260040160206040518083038186803b15801561171357600080fd5b505afa158015611727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174b9190612bd4565b90508015801561175b5750818311155b1561176f5760009650505050505050611495565b80801561177c5750818310155b156117905760009650505050505050611495565b6001600160a01b03861663565eea198b6117af8b6402540be400611e5a565b6040518363ffffffff1660e01b81526004016117cc929190612fda565b60206040518083038186803b1580156117e457600080fd5b505afa1580156117f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181c9190612e93565b9a9950505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60408051808201909152600a8152694f50594e5f47414d4d4160b01b602082015290565b604051636553690d60e11b81526000907f00000000000000000000000000000000000000000000000000000000000000009082906001600160a01b0383169063caa6d21a906118c5903090600401612fc6565b60206040518083038186803b1580156118dd57600080fd5b505afa1580156118f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119159190612e93565b905061191f61298e565b60405163d99d13f560e01b81526001600160a01b0384169063d99d13f59061194d9030908690600401612fda565b60006040518083038186803b15801561196557600080fd5b505afa158015611979573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119a19190810190612d79565b8051519091506119c35760405162461bcd60e51b815260040161055e90613430565b600081604001516000815181106119d657fe5b60200260200101519050600082600001516000815181106119f357fe5b602002602001015190506000611a3b826001600160a01b0316637158da7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561133e57600080fd5b90506000836001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611a6b9190612fc6565b60206040518083038186803b158015611a8357600080fd5b505afa158015611a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611abb9190612e93565b905060608215611bdc5760408051600180825281830190925290816020015b611ae261292d565b815260200190600190039081611ada579050506040805161010081019091529091508060078152602001306001600160a01b03168152602001306001600160a01b0316815260200160006001600160a01b0316815260200188815260200160008152602001600081526020016040518060200160405280600081525081525081600081518110611b6e57fe5b6020908102919091010152604051635b0bf86360e11b81526001600160a01b0389169063b617f0c690611ba5908490600401613048565b600060405180830381600087803b158015611bbf57600080fd5b505af1158015611bd3573d6000803e3d6000fd5b50505050611d9d565b6040805160028082526060820190925290816020015b611bfa61292d565b815260200190600190039081611bf2579050506040805161010081019091529091508060028152602001306001600160a01b03168152602001306001600160a01b03168152602001856001600160a01b031681526020018881526020018760600151600081518110611c6857fe5b60200260200101518152602001600081526020016040518060200160405280600081525081525081600081518110611c9c57fe5b60209081029190910101526040805161010081019091528060068152602001306001600160a01b03168152602001306001600160a01b03168152602001866001600160a01b031681526020018881526020018760a00151600081518110611cff57fe5b60200260200101518152602001600081526020016040518060200160405280600081525081525081600181518110611d3357fe5b6020908102919091010152604051635b0bf86360e11b81526001600160a01b0389169063b617f0c690611d6a908490600401613048565b600060405180830381600087803b158015611d8457600080fd5b505af1158015611d98573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81526000906001600160a01b038716906370a0823190611dcc903090600401612fc6565b60206040518083038186803b158015611de457600080fd5b505afa158015611df8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1c9190612e93565b9050611e2881846124f6565b995050505050505050505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000808211611e7b5760405162461bcd60e51b815260040161055e906133b8565b818381611e8457fe5b049392505050565b6000808490506000816001600160a01b031663aabaecd66040518163ffffffff1660e01b815260040160206040518083038186803b158015611ecd57600080fd5b505afa158015611ee1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f059190612b00565b6040516370a0823160e01b8152909150819086906001600160a01b038316906370a0823190611f38903090600401612fc6565b60206040518083038186803b158015611f5057600080fd5b505afa158015611f64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f889190612e93565b1015611fa65760405162461bcd60e51b815260040161055e90613242565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0384811690821614156120df57604051632e1a7d4d60e01b81528896506001600160a01b03821690632e1a7d4d9061202b9089906004016135da565b600060405180830381600087803b15801561204557600080fd5b505af1158015612059573d6000803e3d6000fd5b505050506000876001600160a01b03168960405161207690612fc3565b60006040518083038185875af1925050503d80600081146120b3576040519150601f19603f3d011682016040523d82523d6000602084013e6120b8565b606091505b50509050806120d95760405162461bcd60e51b815260040161055e90613579565b50612378565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316146121305760405162461bcd60e51b815260040161055e906135bb565b6040805160028082526060808301845292602083019080368337019050509050848160008151811061215e57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050818160018151811061218c57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561220757600080fd5b505afa15801561221b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223f9190612eab565b50505091505061226461225187612384565b600a0a61225e8c8461251e565b906123d0565b9750600088116122865760405162461bcd60e51b815260040161055e90613187565b6122ba6001600160a01b0387167f00000000000000000000000000000000000000000000000000000000000000008c61240a565b6060846001600160a01b03166318cbafe58c6122de8c670a688906bd8b0000612807565b868e61038442016040518663ffffffff1660e01b8152600401612305959493929190613626565b600060405180830381600087803b15801561231f57600080fd5b505af1158015612333573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261235b9190810190612b99565b90508060018151811061236a57fe5b602002602001015198505050505b50505050509392505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156123c85750600661127f565b506012919050565b6000826123df57506000611262565b828202828482816123ec57fe5b04146114955760405162461bcd60e51b815260040161055e906133ef565b6124608363095ea7b360e01b8484604051602401612429929190612fda565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261282f565b1561246a576124cc565b61248a8363095ea7b360e01b84600060405160240161242992919061302c565b80156124b057506124b08363095ea7b360e01b8484604051602401612429929190612fda565b6124cc5760405162461bcd60e51b815260040161055e906132f5565b505050565b6000828201838110156114955760405162461bcd60e51b815260040161055e906132be565b6000828211156125185760405162461bcd60e51b815260040161055e90613381565b50900390565b60008161254061253685670de0b6b3a76400006128d3565b6002855b0461290a565b81611e8457fe5b6000807f000000000000000000000000000000000000000000000000000000000000000090506000816001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156125a857600080fd5b505afa1580156125bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e09190612b00565b90506000816001600160a01b0316635fdc714988876040518363ffffffff1660e01b8152600401612612929190612fda565b60206040518083038186803b15801561262a57600080fd5b505afa15801561263e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126629190612bd4565b90506000866001600160a01b0316886001600160a01b0316141580156126ba57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876001600160a01b031614155b6126c5576001612743565b604051635fdc714960e01b81526001600160a01b03841690635fdc7149906126f3908a908a90600401612fda565b60206040518083038186803b15801561270b57600080fd5b505afa15801561271f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127439190612bd4565b90506000836001600160a01b0316635fdc71497f0000000000000000000000000000000000000000000000000000000000000000896040518363ffffffff1660e01b8152600401612795929190612fda565b60206040518083038186803b1580156127ad57600080fd5b505afa1580156127c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e59190612bd4565b90508280156127f15750805b80156127fa5750815b9998505050505050505050565b6000670de0b6b3a764000061254061281f85856128d3565b6002670de0b6b3a764000061253a565b6000806060846001600160a01b03168460405161284c9190612fa7565b6000604051808303816000865af19150503d8060008114612889576040519150601f19603f3d011682016040523d82523d6000602084013e61288e565b606091505b5091509150816128a357600092505050611262565b60208151106128c957808060200190518101906128c09190612bd4565b92505050611262565b5115949350505050565b60008115806128ee575050808202828282816128eb57fe5b04145b6112625760405162461bcd60e51b815260040161055e90613214565b808201828110156112625760405162461bcd60e51b815260040161055e90613323565b604080516101008101909152806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001606081525090565b6040518060c001604052806060815260200160608152602001606081526020016060815260200160608152602001606081525090565b803561127f81613720565b600082601f8301126129df578081fd5b81516129f26129ed826136d2565b6136ae565b818152915060208083019084810181840286018201871015612a1357600080fd5b60005b84811015612a3b578151612a2981613720565b84529282019290820190600101612a16565b505050505092915050565b600082601f830112612a56578081fd5b8151612a646129ed826136d2565b818152915060208083019084810181840286018201871015612a8557600080fd5b60005b84811015612a3b57815184529282019290820190600101612a88565b80356003811061127f57600080fd5b600060e08284031215612ac4578081fd5b50919050565b805169ffffffffffffffffffff8116811461127f57600080fd5b600060208284031215612af5578081fd5b813561149581613720565b600060208284031215612b11578081fd5b815161149581613720565b600080600060608486031215612b30578182fd5b8335612b3b81613720565b95602085013595506040909401359392505050565b60008060008060808587031215612b65578081fd5b8435612b7081613720565b935060208501359250604085013591506060850135612b8e81613720565b939692955090935050565b600060208284031215612baa578081fd5b815167ffffffffffffffff811115612bc0578182fd5b612bcc84828501612a46565b949350505050565b600060208284031215612be5578081fd5b81518015158114611495578182fd5b600060208284031215612c05578081fd5b61149582612aa4565b600060e08284031215612c1f578081fd5b6114958383612ab3565b600080610100808486031215612c3d578283fd5b612c478585612ab3565b925060e084013567ffffffffffffffff811115612c62578283fd5b8401808603821315612c72578283fd5b80925050509250929050565b6000806101008385031215612c91578182fd5b612c9b8484612ab3565b9460e0939093013593505050565b60008060006101208486031215612cbe578081fd5b612cc88585612ab3565b9560e08501359550610100909401359392505050565b600060e08284031215612cef578081fd5b60405160e0810181811067ffffffffffffffff82111715612d0c57fe5b604052612d18836129c4565b8152612d26602084016129c4565b6020820152612d37604084016129c4565b60408201526060830135606082015260808301356080820152612d5c60a08401612aa4565b60a0820152612d6d60c084016129c4565b60c08201529392505050565b600060208284031215612d8a578081fd5b815167ffffffffffffffff80821115612da1578283fd5b9083019060c08286031215612db4578283fd5b612dbe60c06136ae565b825182811115612dcc578485fd5b612dd8878286016129cf565b825250602083015182811115612dec578485fd5b612df8878286016129cf565b602083015250604083015182811115612e0f578485fd5b612e1b878286016129cf565b604083015250606083015182811115612e32578485fd5b612e3e87828601612a46565b606083015250608083015182811115612e55578485fd5b612e6187828601612a46565b60808301525060a083015182811115612e78578485fd5b612e8487828601612a46565b60a08301525095945050505050565b600060208284031215612ea4578081fd5b5051919050565b600080600080600060a08688031215612ec2578283fd5b612ecb86612aca565b9450602086015193506040860151925060608601519150612eee60808701612aca565b90509295509295909350565b600060208284031215612f0b578081fd5b815160ff81168114611495578182fd5b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015612f605781516001600160a01b031687529582019590820190600101612f3b565b509495945050505050565b60008151808452612f838160208601602086016136f0565b601f01601f19169290920160200192915050565b6000828483379101908152919050565b60008251612fb98184602087016136f0565b9190910192915050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03968716815294861660208601529290941660408401526060830152608082019290925290151560a082015260c00190565b6001600160a01b0392909216825260ff16602082015260400190565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561311057603f1989840301855281516101008151600a811061308e57fe5b8552818901516130a08a870182612f1b565b50878201516130b189870182612f1b565b506060808301516130c482880182612f1b565b50506080828101519086015260a0808301519086015260c0808301519086015260e0918201519185018190526130fc81860183612f6b565b96890196945050509086019060010161306c565b509098975050505050505050565b901515815260200190565b602081016003831061313757fe5b91905290565b6000602082526114956020830184612f6b565b6020808252601b908201527f4e6f7420656e6f75676820627579546f6b656e2062616c616e63650000000000604082015260600190565b6020808252601490820152735377617020697320756e70726f66697461626c6560601b604082015260600190565b6020808252601e908201527f56616c75652063616e6e6f7420636f7665722070726f746f636f6c4665650000604082015260600190565b6020808252600e908201526d24b73b30b634b21037aa37b5b2b760911b604082015260600190565b60208082526014908201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604082015260600190565b60208082526025908201527f4e6f7420656e6f75676820636f6c6c61746572616c2066726f6d2065786572636040820152646973696e6760d81b606082015260800190565b6020808252601d908201527f4e6f7420656e6f7567682074616b657241737365742062616c616e6365000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b602080825260149082015273115490cc8c08185c1c1c9bdd994819985a5b195960621b604082015260600190565b60208082526014908201527364732d6d6174682d6164642d6f766572666c6f7760601b604082015260600190565b6020808252601690820152751bd51bdad95b881b9bdd08195e1c1a5c9959081e595d60521b604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252600f908201526e139bc81858dd1a5d99481cda1bdc9d608a1b604082015260600190565b60208082526019908201527f53656c6c20746f6b656e2068617320746f206265205553444300000000000000604082015260600190565b60208082526023908201527f4e6f7420656e6f7567682062616c616e636520666f722070726f746f636f6c2060408201526266656560e81b606082015260800190565b6020808252601a908201527f4e6f742070726f66697461626c6520746f206578657263697365000000000000604082015260600190565b60208082526027908201527f4d757374206465706f736974206d6f7265207468616e2031302a2a3820636f6c6040820152661b185d195c985b60ca1b606082015260800190565b6020808252600e908201526d0c1e081cddd85c0819985a5b195960921b604082015260600190565b60208082526022908201527f4661696c656420746f207472616e736665722065786572636973652070726f666040820152611a5d60f21b606082015260800190565b602080825260059082015264215553444360d81b604082015260600190565b90815260200190565b6000858252608060208301526135fc6080830186612f28565b6001600160a01b03949094166040830152506060015292915050565b918252602082015260400190565b600086825285602083015260a0604083015261364560a0830186612f28565b6001600160a01b0394909416606083015250608001529392505050565b6000808335601e19843603018112613678578283fd5b83018035915067ffffffffffffffff821115613692578283fd5b6020019150368190038213156136a757600080fd5b9250929050565b60405181810167ffffffffffffffff811182821017156136ca57fe5b604052919050565b600067ffffffffffffffff8211156136e657fe5b5060209081020190565b60005b8381101561370b5781810151838201526020016136f3565b8381111561371a576000848401525b50505050565b6001600160a01b038116811461373557600080fd5b5056fea264697066735822122070685f69e1eac1575f630a9547b3cfc670bd262eb7c0052af9e9827d9d289ca864736f6c63430007020033",
  "deployedBytecode": "0x6080604052600436106101395760003560e01c8063b63a3a6d116100ab578063d44544421161006f578063d445444214610312578063d460094d14610325578063d826492014610345578063e567e8691461035a578063f8432a1b1461037c578063fbd49c661461039157610140565b8063b63a3a6d14610286578063b9e9683b146102a6578063bce3393f146102c6578063c2d8506b146102db578063ca60bcb8146102fd57610140565b80636abf4c5e116100fd5780636abf4c5e146101cd5780636c3fac58146101e25780636e2ccc521461020f57806381390d6b1461022f57806389a302711461025c578063ad5c46481461027157610140565b80630216db00146101455780631984a8051461017b5780632e12c8bb146101905780633afb78e1146101a5578063650cce8a146101b857610140565b3661014057005b600080fd5b34801561015157600080fd5b50610165610160366004612cde565b6103a6565b6040516101729190612fc6565b60405180910390f35b61018e610189366004612b50565b6104c9565b005b34801561019c57600080fd5b50610165610774565b61018e6101b3366004612c29565b610798565b3480156101c457600080fd5b50610165610d74565b3480156101d957600080fd5b50610165610d98565b3480156101ee57600080fd5b506102026101fd366004612c7e565b610dbc565b60405161017291906135da565b34801561021b57600080fd5b5061016561022a366004612c0e565b611268565b34801561023b57600080fd5b5061024f61024a366004612c0e565b611284565b604051610172919061311e565b34801561026857600080fd5b506101656112aa565b34801561027d57600080fd5b506101656112ce565b34801561029257600080fd5b506102026102a1366004612c7e565b6112f2565b3480156102b257600080fd5b5061024f6102c1366004612b1c565b6112fa565b3480156102d257600080fd5b5061024f61149c565b3480156102e757600080fd5b506102f06114a1565b6040516101729190613129565b34801561030957600080fd5b506101656114a6565b610202610320366004612ca9565b6114ca565b34801561033157600080fd5b50610202610340366004612b1c565b6114d3565b34801561035157600080fd5b5061016561182a565b34801561036657600080fd5b5061036f61184e565b604051610172919061313d565b34801561038857600080fd5b50610202611872565b34801561039d57600080fd5b50610165611e36565b60007f00000000000000000000000000000000000000000000000000000000000000008160018460a0015160028111156103dc57fe5b8551911491506001600160a01b03811661041357507f00000000000000000000000000000000000000000000000000000000000000005b826001600160a01b0316631154705482876020015188604001516104496402540be4008b60800151611e5a90919063ffffffff16565b8a60600151886040518763ffffffff1660e01b815260040161047096959493929190612ff3565b60206040518083038186803b15801561048857600080fd5b505afa15801561049c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c09190612b00565b95945050505050565b6000849050806001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561050757600080fd5b505afa15801561051b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053f9190612e93565b4210156105675760405162461bcd60e51b815260040161055e90613351565b60405180910390fd5b6000610578846402540be400611e5a565b90506000610588876000876114d3565b9050600081116105aa5760405162461bcd60e51b815260040161055e906134d3565b6105b261292d565b6040805161010081019091528060088152602001306001600160a01b03168152602001306001600160a01b03168152602001896001600160a01b0316815260200160008152602001848152602001600081526020016040518060200160405280600081525081525090506060600167ffffffffffffffff8111801561063657600080fd5b5060405190808252806020026020018201604052801561067057816020015b61065d61292d565b8152602001906001900390816106555790505b509050818160008151811061068157fe5b6020908102919091010152604051635b0bf86360e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b617f0c6906106d8908490600401613048565b600060405180830381600087803b1580156106f257600080fd5b505af1158015610706573d6000803e3d6000fd5b5050505060006107178a8589611e8c565b905060008a6001600160a01b0316336001600160a01b03167fd7fc7dfb5428de5160681fa939d5257f9f24e27f5db993044185551c48c162b08b85604051610760929190613618565b60405180910390a450505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b80608001353410156107bc5760405162461bcd60e51b815260040161055e906131b5565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166107f66060830160408401612ae4565b6001600160a01b03161461081c5760405162461bcd60e51b815260040161055e90613459565b604080516002808252606080830184527f000000000000000000000000000000000000000000000000000000000000000093909291906020830190803683370190505090507f00000000000000000000000000000000000000000000000000000000000000008160008151811061088f57fe5b6001600160a01b03909216602092830291909101909101526108b76060840160408501612ae4565b816001815181106108c457fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561093f57600080fd5b505afa158015610953573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109779190612eab565b50505091505060006109b461099d8660400160208101906109989190612ae4565b612384565b600a0a6109ae60c0880135856123d0565b90611e5a565b9050836001600160a01b031663fb3bdb41828760c00135863061038442016040518663ffffffff1660e01b81526004016109f194939291906135e3565b6000604051808303818588803b158015610a0a57600080fd5b505af1158015610a1e573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052610a479190810190612b99565b5060c0850135610a5d6060870160408801612ae4565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610a889190612fc6565b60206040518083038186803b158015610aa057600080fd5b505afa158015610ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad89190612e93565b1015610af65760405162461bcd60e51b815260040161055e90613287565b610b2b610b096080870160608801612ae4565b6000610b1b6060890160408a01612ae4565b6001600160a01b0316919061240a565b610b53610b3e6080870160608801612ae4565b60c0870135610b1b6060890160408a01612ae4565b8460800135471015610b775760405162461bcd60e51b815260040161055e90613490565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166080870135610bb560e0890189613662565b604051610bc3929190612f97565b60006040518083038185875af1925050503d8060008114610c00576040519150601f19603f3d011682016040523d82523d6000602084013e610c05565b606091505b5050905080610c265760405162461bcd60e51b815260040161055e90613551565b60a0860135610c3b6040880160208901612ae4565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610c669190612fc6565b60206040518083038186803b158015610c7e57600080fd5b505afa158015610c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb69190612e93565b1015610cd45760405162461bcd60e51b815260040161055e90613150565b610ce16020880188612ae4565b6001600160a01b03166040518060400160405280600a8152602001694f50594e5f47414d4d4160b01b815250604051610d1a9190612fa7565b604051908190039020337fe68386c7f55bea7f76f0caf3b4b0ef33cf863275ed45fde6ebb411e7e4cfaba0610d538660808c01356124d1565b6000604051610d63929190613618565b60405180910390a450505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000807f000000000000000000000000000000000000000000000000000000000000000090506000610e6b6001836001600160a01b031663caa6d21a306040518263ffffffff1660e01b8152600401610e159190612fc6565b60206040518083038186803b158015610e2d57600080fd5b505afa158015610e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e659190612e93565b906124d1565b90506000610e8161016036889003880188612cde565b90506001600160a01b038116610ea95760405162461bcd60e51b815260040161055e906131ec565b6000610ebb6060880160408901612ae4565b90506001600160a01b038116610eee57507f00000000000000000000000000000000000000000000000000000000000000005b60008190506000826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2e57600080fd5b505afa158015610f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f669190612efa565b60ff16905060006002610f7f60c08c0160a08d01612bf4565b6002811115610f8a57fe5b1415610fea5750876000610f9f8360086124f6565b600a0a90508082118015610fb35750600883115b15610fe457610fc28a82611e5a565b915060008211610fe45760405162461bcd60e51b815260040161055e9061350a565b50611010565b61100d600a83900a6109ae6110038c6305f5e1006123d0565b8d6080013561251e565b90505b6110446001600160a01b0384167f00000000000000000000000000000000000000000000000000000000000000008b61240a565b60408051600380825260808201909252606091816020015b61106461292d565b81526020019060019003908161105c579050506040805161010081019091529091508060008152602001306001600160a01b03168152602001306001600160a01b0316815260200160006001600160a01b03168152602001888152602001600081526020016000815260200160405180602001604052806000815250815250816000815181106110f057fe5b60209081029190910101526040805161010081019091528060058152602001306001600160a01b03168152602001306001600160a01b03168152602001866001600160a01b031681526020018881526020018b815260200160008152602001604051806020016040528060008152508152508160018151811061116f57fe5b60209081029190910101526040805161010081019091528060018152602001306001600160a01b03168152602001306001600160a01b03168152602001876001600160a01b031681526020018881526020018381526020016000815260200160405180602001604052806000815250815250816002815181106111ee57fe5b6020908102919091010152604051635b0bf86360e11b81526001600160a01b0389169063b617f0c690611225908490600401613048565b600060405180830381600087803b15801561123f57600080fd5b505af1158015611253573d6000803e3d6000fd5b50939a50505050505050505050505b92915050565b600061127c61016036849003840184612cde565b90505b919050565b60008061129961016036859003850185612cde565b6001600160a01b0316141592915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600092915050565b600080849050600061145d826001600160a01b0316637158da7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561133e57600080fd5b505afa158015611352573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113769190612b00565b836001600160a01b031663aabaecd66040518163ffffffff1660e01b815260040160206040518083038186803b1580156113af57600080fd5b505afa1580156113c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e79190612b00565b846001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561142057600080fd5b505afa158015611434573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114589190612e93565b612547565b90508061146f57600092505050611495565b600061147d876000876114d3565b111561148e57600192505050611495565b6000925050505b9392505050565b600090565b600290565b7f000000000000000000000000000000000000000000000000000000000000000081565b60009392505050565b6000807f000000000000000000000000000000000000000000000000000000000000000090506000816001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561153457600080fd5b505afa158015611548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156c9190612b00565b905060008690506000826001600160a01b03166341976e09836001600160a01b0316637158da7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115bd57600080fd5b505afa1580156115d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f59190612b00565b6040518263ffffffff1660e01b81526004016116119190612fc6565b60206040518083038186803b15801561162957600080fd5b505afa15801561163d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116619190612e93565b90506000826001600160a01b031663c52987cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561169e57600080fd5b505afa1580156116b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d69190612e93565b90506000836001600160a01b031663f3c274a66040518163ffffffff1660e01b815260040160206040518083038186803b15801561171357600080fd5b505afa158015611727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174b9190612bd4565b90508015801561175b5750818311155b1561176f5760009650505050505050611495565b80801561177c5750818310155b156117905760009650505050505050611495565b6001600160a01b03861663565eea198b6117af8b6402540be400611e5a565b6040518363ffffffff1660e01b81526004016117cc929190612fda565b60206040518083038186803b1580156117e457600080fd5b505afa1580156117f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181c9190612e93565b9a9950505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60408051808201909152600a8152694f50594e5f47414d4d4160b01b602082015290565b604051636553690d60e11b81526000907f00000000000000000000000000000000000000000000000000000000000000009082906001600160a01b0383169063caa6d21a906118c5903090600401612fc6565b60206040518083038186803b1580156118dd57600080fd5b505afa1580156118f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119159190612e93565b905061191f61298e565b60405163d99d13f560e01b81526001600160a01b0384169063d99d13f59061194d9030908690600401612fda565b60006040518083038186803b15801561196557600080fd5b505afa158015611979573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119a19190810190612d79565b8051519091506119c35760405162461bcd60e51b815260040161055e90613430565b600081604001516000815181106119d657fe5b60200260200101519050600082600001516000815181106119f357fe5b602002602001015190506000611a3b826001600160a01b0316637158da7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561133e57600080fd5b90506000836001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611a6b9190612fc6565b60206040518083038186803b158015611a8357600080fd5b505afa158015611a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611abb9190612e93565b905060608215611bdc5760408051600180825281830190925290816020015b611ae261292d565b815260200190600190039081611ada579050506040805161010081019091529091508060078152602001306001600160a01b03168152602001306001600160a01b0316815260200160006001600160a01b0316815260200188815260200160008152602001600081526020016040518060200160405280600081525081525081600081518110611b6e57fe5b6020908102919091010152604051635b0bf86360e11b81526001600160a01b0389169063b617f0c690611ba5908490600401613048565b600060405180830381600087803b158015611bbf57600080fd5b505af1158015611bd3573d6000803e3d6000fd5b50505050611d9d565b6040805160028082526060820190925290816020015b611bfa61292d565b815260200190600190039081611bf2579050506040805161010081019091529091508060028152602001306001600160a01b03168152602001306001600160a01b03168152602001856001600160a01b031681526020018881526020018760600151600081518110611c6857fe5b60200260200101518152602001600081526020016040518060200160405280600081525081525081600081518110611c9c57fe5b60209081029190910101526040805161010081019091528060068152602001306001600160a01b03168152602001306001600160a01b03168152602001866001600160a01b031681526020018881526020018760a00151600081518110611cff57fe5b60200260200101518152602001600081526020016040518060200160405280600081525081525081600181518110611d3357fe5b6020908102919091010152604051635b0bf86360e11b81526001600160a01b0389169063b617f0c690611d6a908490600401613048565b600060405180830381600087803b158015611d8457600080fd5b505af1158015611d98573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81526000906001600160a01b038716906370a0823190611dcc903090600401612fc6565b60206040518083038186803b158015611de457600080fd5b505afa158015611df8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1c9190612e93565b9050611e2881846124f6565b995050505050505050505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000808211611e7b5760405162461bcd60e51b815260040161055e906133b8565b818381611e8457fe5b049392505050565b6000808490506000816001600160a01b031663aabaecd66040518163ffffffff1660e01b815260040160206040518083038186803b158015611ecd57600080fd5b505afa158015611ee1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f059190612b00565b6040516370a0823160e01b8152909150819086906001600160a01b038316906370a0823190611f38903090600401612fc6565b60206040518083038186803b158015611f5057600080fd5b505afa158015611f64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f889190612e93565b1015611fa65760405162461bcd60e51b815260040161055e90613242565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0384811690821614156120df57604051632e1a7d4d60e01b81528896506001600160a01b03821690632e1a7d4d9061202b9089906004016135da565b600060405180830381600087803b15801561204557600080fd5b505af1158015612059573d6000803e3d6000fd5b505050506000876001600160a01b03168960405161207690612fc3565b60006040518083038185875af1925050503d80600081146120b3576040519150601f19603f3d011682016040523d82523d6000602084013e6120b8565b606091505b50509050806120d95760405162461bcd60e51b815260040161055e90613579565b50612378565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316146121305760405162461bcd60e51b815260040161055e906135bb565b6040805160028082526060808301845292602083019080368337019050509050848160008151811061215e57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050818160018151811061218c57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561220757600080fd5b505afa15801561221b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223f9190612eab565b50505091505061226461225187612384565b600a0a61225e8c8461251e565b906123d0565b9750600088116122865760405162461bcd60e51b815260040161055e90613187565b6122ba6001600160a01b0387167f00000000000000000000000000000000000000000000000000000000000000008c61240a565b6060846001600160a01b03166318cbafe58c6122de8c670a688906bd8b0000612807565b868e61038442016040518663ffffffff1660e01b8152600401612305959493929190613626565b600060405180830381600087803b15801561231f57600080fd5b505af1158015612333573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261235b9190810190612b99565b90508060018151811061236a57fe5b602002602001015198505050505b50505050509392505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156123c85750600661127f565b506012919050565b6000826123df57506000611262565b828202828482816123ec57fe5b04146114955760405162461bcd60e51b815260040161055e906133ef565b6124608363095ea7b360e01b8484604051602401612429929190612fda565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261282f565b1561246a576124cc565b61248a8363095ea7b360e01b84600060405160240161242992919061302c565b80156124b057506124b08363095ea7b360e01b8484604051602401612429929190612fda565b6124cc5760405162461bcd60e51b815260040161055e906132f5565b505050565b6000828201838110156114955760405162461bcd60e51b815260040161055e906132be565b6000828211156125185760405162461bcd60e51b815260040161055e90613381565b50900390565b60008161254061253685670de0b6b3a76400006128d3565b6002855b0461290a565b81611e8457fe5b6000807f000000000000000000000000000000000000000000000000000000000000000090506000816001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156125a857600080fd5b505afa1580156125bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e09190612b00565b90506000816001600160a01b0316635fdc714988876040518363ffffffff1660e01b8152600401612612929190612fda565b60206040518083038186803b15801561262a57600080fd5b505afa15801561263e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126629190612bd4565b90506000866001600160a01b0316886001600160a01b0316141580156126ba57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876001600160a01b031614155b6126c5576001612743565b604051635fdc714960e01b81526001600160a01b03841690635fdc7149906126f3908a908a90600401612fda565b60206040518083038186803b15801561270b57600080fd5b505afa15801561271f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127439190612bd4565b90506000836001600160a01b0316635fdc71497f0000000000000000000000000000000000000000000000000000000000000000896040518363ffffffff1660e01b8152600401612795929190612fda565b60206040518083038186803b1580156127ad57600080fd5b505afa1580156127c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e59190612bd4565b90508280156127f15750805b80156127fa5750815b9998505050505050505050565b6000670de0b6b3a764000061254061281f85856128d3565b6002670de0b6b3a764000061253a565b6000806060846001600160a01b03168460405161284c9190612fa7565b6000604051808303816000865af19150503d8060008114612889576040519150601f19603f3d011682016040523d82523d6000602084013e61288e565b606091505b5091509150816128a357600092505050611262565b60208151106128c957808060200190518101906128c09190612bd4565b92505050611262565b5115949350505050565b60008115806128ee575050808202828282816128eb57fe5b04145b6112625760405162461bcd60e51b815260040161055e90613214565b808201828110156112625760405162461bcd60e51b815260040161055e90613323565b604080516101008101909152806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001606081525090565b6040518060c001604052806060815260200160608152602001606081526020016060815260200160608152602001606081525090565b803561127f81613720565b600082601f8301126129df578081fd5b81516129f26129ed826136d2565b6136ae565b818152915060208083019084810181840286018201871015612a1357600080fd5b60005b84811015612a3b578151612a2981613720565b84529282019290820190600101612a16565b505050505092915050565b600082601f830112612a56578081fd5b8151612a646129ed826136d2565b818152915060208083019084810181840286018201871015612a8557600080fd5b60005b84811015612a3b57815184529282019290820190600101612a88565b80356003811061127f57600080fd5b600060e08284031215612ac4578081fd5b50919050565b805169ffffffffffffffffffff8116811461127f57600080fd5b600060208284031215612af5578081fd5b813561149581613720565b600060208284031215612b11578081fd5b815161149581613720565b600080600060608486031215612b30578182fd5b8335612b3b81613720565b95602085013595506040909401359392505050565b60008060008060808587031215612b65578081fd5b8435612b7081613720565b935060208501359250604085013591506060850135612b8e81613720565b939692955090935050565b600060208284031215612baa578081fd5b815167ffffffffffffffff811115612bc0578182fd5b612bcc84828501612a46565b949350505050565b600060208284031215612be5578081fd5b81518015158114611495578182fd5b600060208284031215612c05578081fd5b61149582612aa4565b600060e08284031215612c1f578081fd5b6114958383612ab3565b600080610100808486031215612c3d578283fd5b612c478585612ab3565b925060e084013567ffffffffffffffff811115612c62578283fd5b8401808603821315612c72578283fd5b80925050509250929050565b6000806101008385031215612c91578182fd5b612c9b8484612ab3565b9460e0939093013593505050565b60008060006101208486031215612cbe578081fd5b612cc88585612ab3565b9560e08501359550610100909401359392505050565b600060e08284031215612cef578081fd5b60405160e0810181811067ffffffffffffffff82111715612d0c57fe5b604052612d18836129c4565b8152612d26602084016129c4565b6020820152612d37604084016129c4565b60408201526060830135606082015260808301356080820152612d5c60a08401612aa4565b60a0820152612d6d60c084016129c4565b60c08201529392505050565b600060208284031215612d8a578081fd5b815167ffffffffffffffff80821115612da1578283fd5b9083019060c08286031215612db4578283fd5b612dbe60c06136ae565b825182811115612dcc578485fd5b612dd8878286016129cf565b825250602083015182811115612dec578485fd5b612df8878286016129cf565b602083015250604083015182811115612e0f578485fd5b612e1b878286016129cf565b604083015250606083015182811115612e32578485fd5b612e3e87828601612a46565b606083015250608083015182811115612e55578485fd5b612e6187828601612a46565b60808301525060a083015182811115612e78578485fd5b612e8487828601612a46565b60a08301525095945050505050565b600060208284031215612ea4578081fd5b5051919050565b600080600080600060a08688031215612ec2578283fd5b612ecb86612aca565b9450602086015193506040860151925060608601519150612eee60808701612aca565b90509295509295909350565b600060208284031215612f0b578081fd5b815160ff81168114611495578182fd5b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015612f605781516001600160a01b031687529582019590820190600101612f3b565b509495945050505050565b60008151808452612f838160208601602086016136f0565b601f01601f19169290920160200192915050565b6000828483379101908152919050565b60008251612fb98184602087016136f0565b9190910192915050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03968716815294861660208601529290941660408401526060830152608082019290925290151560a082015260c00190565b6001600160a01b0392909216825260ff16602082015260400190565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561311057603f1989840301855281516101008151600a811061308e57fe5b8552818901516130a08a870182612f1b565b50878201516130b189870182612f1b565b506060808301516130c482880182612f1b565b50506080828101519086015260a0808301519086015260c0808301519086015260e0918201519185018190526130fc81860183612f6b565b96890196945050509086019060010161306c565b509098975050505050505050565b901515815260200190565b602081016003831061313757fe5b91905290565b6000602082526114956020830184612f6b565b6020808252601b908201527f4e6f7420656e6f75676820627579546f6b656e2062616c616e63650000000000604082015260600190565b6020808252601490820152735377617020697320756e70726f66697461626c6560601b604082015260600190565b6020808252601e908201527f56616c75652063616e6e6f7420636f7665722070726f746f636f6c4665650000604082015260600190565b6020808252600e908201526d24b73b30b634b21037aa37b5b2b760911b604082015260600190565b60208082526014908201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604082015260600190565b60208082526025908201527f4e6f7420656e6f75676820636f6c6c61746572616c2066726f6d2065786572636040820152646973696e6760d81b606082015260800190565b6020808252601d908201527f4e6f7420656e6f7567682074616b657241737365742062616c616e6365000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b602080825260149082015273115490cc8c08185c1c1c9bdd994819985a5b195960621b604082015260600190565b60208082526014908201527364732d6d6174682d6164642d6f766572666c6f7760601b604082015260600190565b6020808252601690820152751bd51bdad95b881b9bdd08195e1c1a5c9959081e595d60521b604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252600f908201526e139bc81858dd1a5d99481cda1bdc9d608a1b604082015260600190565b60208082526019908201527f53656c6c20746f6b656e2068617320746f206265205553444300000000000000604082015260600190565b60208082526023908201527f4e6f7420656e6f7567682062616c616e636520666f722070726f746f636f6c2060408201526266656560e81b606082015260800190565b6020808252601a908201527f4e6f742070726f66697461626c6520746f206578657263697365000000000000604082015260600190565b60208082526027908201527f4d757374206465706f736974206d6f7265207468616e2031302a2a3820636f6c6040820152661b185d195c985b60ca1b606082015260800190565b6020808252600e908201526d0c1e081cddd85c0819985a5b195960921b604082015260600190565b60208082526022908201527f4661696c656420746f207472616e736665722065786572636973652070726f666040820152611a5d60f21b606082015260800190565b602080825260059082015264215553444360d81b604082015260600190565b90815260200190565b6000858252608060208301526135fc6080830186612f28565b6001600160a01b03949094166040830152506060015292915050565b918252602082015260400190565b600086825285602083015260a0604083015261364560a0830186612f28565b6001600160a01b0394909416606083015250608001529392505050565b6000808335601e19843603018112613678578283fd5b83018035915067ffffffffffffffff821115613692578283fd5b6020019150368190038213156136a757600080fd5b9250929050565b60405181810167ffffffffffffffff811182821017156136ca57fe5b604052919050565b600067ffffffffffffffff8211156136e657fe5b5060209081020190565b60005b8381101561370b5781810151838201526020016136f3565b8381111561371a576000848401525b50505050565b6001600160a01b038116811461373557600080fd5b5056fea264697066735822122070685f69e1eac1575f630a9547b3cfc670bd262eb7c0052af9e9827d9d289ca864736f6c63430007020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "canExercise(address,uint256,uint256)": {
        "params": {
          "amount": "is amount of otokens to exercise",
          "options": "is the address of the otoken"
        }
      },
      "constructor": {
        "params": {
          "_gammaController": "is a top-level contract which allows users to perform multiple actions in the Gamma protocol https://github.com/opynfinance/GammaProtocol/blob/master/contracts/Controller.sol",
          "_oTokenFactory": "is the Gamma protocol factory contract which spawns otokens https://github.com/opynfinance/GammaProtocol/blob/master/contracts/OtokenFactory.sol"
        }
      },
      "createShort((address,address,address,uint256,uint256,uint8,address),uint256)": {
        "params": {
          "depositAmount": "is the amount deposited to open the vault.        This amount will determine how much otokens to mint.",
          "optionTerms": "is the terms of the option contract"
        }
      },
      "exercise(address,uint256,uint256,address)": {
        "params": {
          "amount": "is the amount of tokens or options contract to exercise.        Only relevant for fungle protocols like Opyn",
          "options": "is the address of the options contract",
          "recipient": "is the account that receives the exercised profits.        This is needed since the adapter holds all the positions and the msg.sender is an instrument contract."
        }
      },
      "exerciseProfit(address,uint256,uint256)": {
        "params": {
          "amount": "is the amount of tokens or options contract to exercise        Only relevant for fungle protocols like Opyn",
          "options": "is the address of the options contract"
        }
      },
      "getOptionsAddress((address,address,address,uint256,uint256,uint8,address))": {
        "params": {
          "optionTerms": "is the terms of the option contract"
        }
      },
      "lookupOToken((address,address,address,uint256,uint256,uint8,address))": {
        "params": {
          "optionTerms": "is the terms of the option contract"
        }
      },
      "optionsExist((address,address,address,uint256,uint256,uint8,address))": {
        "params": {
          "optionTerms": "is the terms of the option contract"
        }
      },
      "purchaseWithZeroEx((address,address,address,uint256,uint256,uint8,address),(address,address,address,address,uint256,uint256,uint256,bytes))": {
        "params": {
          "optionTerms": "is the terms of the option contract",
          "zeroExOrder": "is the 0x order struct constructed using the 0x API response passed by the frontend."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Exercised(address,address,uint256,uint256,uint256)": {
        "notice": "Emitted when an option contract is exercised"
      },
      "Purchased(address,string,address,uint256,uint256)": {
        "notice": "Emitted when a new option contract is purchased"
      }
    },
    "kind": "user",
    "methods": {
      "canExercise(address,uint256,uint256)": {
        "notice": "Helper function that returns true if the option can be exercised now."
      },
      "closeShort()": {
        "notice": "Close the existing short otoken position. Currently this implementation is simple. It closes the most recent vault opened by the contract. This assumes that the contract will only have a single vault open at any given time. Since calling `closeShort` deletes vaults, this assumption should hold."
      },
      "constructor": {
        "notice": "Constructor for the GammaAdapter which initializes a variables"
      },
      "createShort((address,address,address,uint256,uint256,uint8,address),uint256)": {
        "notice": "Creates a short otoken position by opening a vault, depositing collateral and minting otokens. The sale of otokens is left to the caller contract to perform."
      },
      "exercise(address,uint256,uint256,address)": {
        "notice": "Exercises the options contract."
      },
      "exerciseProfit(address,uint256,uint256)": {
        "notice": "Amount of profit made from exercising an option contract abs(current price - strike price)         0 if exercising out-the-money."
      },
      "getOptionsAddress((address,address,address,uint256,uint256,uint8,address))": {
        "notice": "Get the options contract's address based on the passed parameters"
      },
      "lookupOToken((address,address,address,uint256,uint256,uint8,address))": {
        "notice": "Function to lookup oToken addresses. oToken addresses are keyed by an ABI-encoded byte string"
      },
      "nonFungible()": {
        "notice": "Boolean flag to indicate whether to use option IDs or not. Fungible protocols normally use tokens to represent option contracts."
      },
      "optionsExist((address,address,address,uint256,uint256,uint8,address))": {
        "notice": "Check if an options contract exist based on the passed parameters."
      },
      "premium((address,address,address,uint256,uint256,uint8,address),uint256)": {
        "notice": "Gets the premium to buy `purchaseAmount` of the option contract in ETH terms."
      },
      "protocolName()": {
        "notice": "Name of the adapter. E.g. \"HEGIC\", \"OPYN_V1\". Used as index key for adapter addresses"
      },
      "purchase((address,address,address,uint256,uint256,uint8,address),uint256,uint256)": {
        "notice": "Stubbed out for conforming to the IProtocolAdapter interface."
      },
      "purchaseMethod()": {
        "notice": "Returns the purchase method used to purchase options"
      },
      "purchaseWithZeroEx((address,address,address,uint256,uint256,uint8,address),(address,address,address,address,uint256,uint256,uint256,bytes))": {
        "notice": "Purchases otokens using a 0x order struct It is the obligation of the delegate-calling contract to return the remaining msg.value back to the user."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}